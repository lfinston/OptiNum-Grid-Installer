@q ex_rfc2818.web  @>

@q Copied from the GNU TLS manual and adapted by  @>
@q Laurence D. Finston (LDF) Tue Nov 17 15:22:57 CET 2009  @>


@q This example code is placed in the public domain. @>

@q * (1) Example RFC 2818.  @>
@ Example RFC 2818.

@q ** (2) Include files.  @>
@ Include files.
\initials{LDF 2009.11.30.}

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <string>
#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>
#include <map>

#include <deque>
#include <vector>

#include <pthread.h>

#include <gnutls/gnutls.h>
#include <gnutls/x509.h>

#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#if IS_ROCKS_GOEGRID
#undef HAVE_LIBMYSQLCLIENT
#endif 


#include "entries.h++"
#include "dstngnmt.h++"
#include "glblvrbl.h++"
#include "glblfncs.h++"
#include "utilfncs.h++"

@q ** (2) Verify certificate.  @>
@ Verify certificate.
\initials{LDF 2009.11.30.}

This function will try to verify the peer's certificate, and
also check if the hostname matches, and the activation, expiration dates.
\initials{LDF 2009.11.30.}

It is invoked in |client_connect_auth|, which is defined in \filename{cnnctcli.web}.
\initials{LDF 2010.08.04.}

\LOG
\initials{LDF 2010.01.15.}
Made |hostname| argument optional with default 0.

\initials{LDF 2010.04.01.}
Changed return value from |void| to |int|.
\ENDLOG

@q *** (3) Declaration @>

@<Declare |verify_certificate|@>=

int
verify_certificate (gnutls_session_t session, const char *hostname = 0);

@q *** (3) Definition @>
@
@<Define |verify_certificate|@>=

int
verify_certificate (gnutls_session_t session, const char *hostname)
{

  bool DEBUG = false;  /* |true|  */
  set_debug_level(DEBUG);

  if (DEBUG) 
  {
     lock_cerr_mutex(); 
     cerr << "*** Entering `verify_certificate'." << endl;
     unlock_cerr_mutex(); 

  } /* |if (DEBUG)| */

  unsigned int status;
  const gnutls_datum_t *cert_list;
  unsigned int cert_list_size;
  int ret;
  gnutls_x509_crt_t cert;

  char temp_str[256];


  /* This verification function uses the trusted CAs in the credentials
   * structure. So you must have installed one or more CA certificates.

   LDF 2009.11.23.
   This would seem to mean using the 
   |gnutls_certificate_set_x509_trust_file| and |gnutls_certificate_set_x509_key_file|
   functions.

  */

  ret = gnutls_certificate_verify_peers2 (session, &status);

  if (ret < 0)
  {

    strcpy(temp_str, "ERROR:  In `verify_certificate':\n");
    strcat(temp_str, 
           "`gnutls_certificate_verify_peers2' failed returning %d\n");
  
    lock_cerr_mutex(); 
    fprintf(stderr, temp_str, ret);
    fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully return value 1.\n");
    unlock_cerr_mutex(); 

    return 1;
  }

@
\LOG
\initials{LDF 2010.04.01.}
Now exiting unsuccessfully when the certificate not trusted, revoked, etc.
\ENDLOG 

@<Define |verify_certificate|@>=


  if (status & GNUTLS_CERT_INVALID)
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate is not trusted.\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
  }
  else if (DEBUG) 
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate is trusted.\n");
      unlock_cerr_mutex(); 
  }


  if (status & GNUTLS_CERT_SIGNER_NOT_FOUND)
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate hasn't got a known issuer.\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
  }
  else if (DEBUG) 
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate has got a known issuer.\n");
      unlock_cerr_mutex(); 
  }


  if (status & GNUTLS_CERT_REVOKED)
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate has been revoked.\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
  }
  else if (DEBUG) 
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate hasn't been revoked.\n");
      unlock_cerr_mutex(); 
  }

@
@<Define |verify_certificate|@>=


  /* Up to here the process is the same for X.509 certificates and
   * OpenPGP keys. From now on X.509 certificates are assumed. This can
   * be easily extended to work with openpgp keys as well.
   */

  if (gnutls_certificate_type_get (session) != GNUTLS_CRT_X509)
  {
    lock_cerr_mutex(); 
    fprintf(stderr, "`gnutls_certificate_type_get (session)' != GNUTLS_CRT_X509\n");
    fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
    unlock_cerr_mutex(); 
    return 1;
  }

  if (gnutls_x509_crt_init (&cert) < 0)
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "ERROR:  In `verify_certificate':  Error in initialization\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
  }

  cert_list = gnutls_certificate_get_peers (session, &cert_list_size);

  if (cert_list == NULL)
    {
      lock_cerr_mutex(); 
      fprintf(stderr, "ERROR:  In `verify_certificate':  No certificate was found!\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
    }
  else if (DEBUG) 
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "In `verify_certificate':  Certificate was found.\n");
      unlock_cerr_mutex(); 
  }


  /* This is not a real world example, since we only check the first 
   * certificate in the given chain.   */

  if (gnutls_x509_crt_import (cert, &cert_list[0], GNUTLS_X509_FMT_DER) < 0)
    {
      lock_cerr_mutex(); 
      fprintf(stderr, "ERROR:  In `verify_certificate':  error parsing certificate\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
    }
  else if (DEBUG) 
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "Parsed certificate successfully\n");
      unlock_cerr_mutex(); 
  }


  /* Beware here we do not check for errors.   */

  if (gnutls_x509_crt_get_expiration_time (cert) < time (0))
    {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate has expired\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
    }
  else if (DEBUG) 
  {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate hasn't expired\n");
      unlock_cerr_mutex(); 
  }

  if (gnutls_x509_crt_get_activation_time (cert) > time (0))
    {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate is not yet activated\n");
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
    }
  else if (DEBUG)
  {
     lock_cerr_mutex(); 
     fprintf(stderr, "The certificate has been activated\n");
     unlock_cerr_mutex(); 
  }

@

!! TODO: \initials{LDF 2009.12.08.}  Maybe use this to test whether the owner of the 
server's certificate is who we think it is.
\initials{LDF 2009.12.08.}

\LOG
\initials{LDF 2009.12.08.}
Commented-out.  Later, this code may be useful.  See ``TODO'' note above.
\ENDLOG 

@<Define |verify_certificate|@>=

#if 0 
  if (hostname && !gnutls_x509_crt_check_hostname (cert, hostname))
    {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate's owner does not match hostname '%s'\n",
	      hostname);
      fprintf(stderr, "*** Exiting `verify_certificate' unsuccessfully with return value 1.\n");
      unlock_cerr_mutex(); 
      return 1;
    }
   else
   {
      lock_cerr_mutex(); 
      fprintf(stderr, "The certificate's owner matches hostname '%s'\n", hostname);
      unlock_cerr_mutex(); 
   }

#endif 

  gnutls_x509_crt_deinit (cert);

  if (DEBUG)
  {
     lock_cerr_mutex(); 
     fprintf(stderr, "Verification succeeded\n");
     fprintf(stderr, "*** Exiting `verify_certificate' successfully with return value 0.\n");
     unlock_cerr_mutex(); 

  }  /* |if (DEBUG)|  */ 

  return 0;

}  /* End of |verify_certificate| definition  */

@q ** (2) This is what's compiled.@>
@ This is what's compiled.
\initials{LDF 2009.11.30.}

@c
@<Include files@>@;@/
using namespace std;
@<Declare |verify_certificate|@>@;@/
@<Define |verify_certificate|@>@;@/

@q ** (2) This is what's written to the header file `ex_rfc2818.h'.@>

@ This is what's written to the header file \filename{ex\_rfc2818.h}.

@(ex_rfc2818.h@>=
@<Declare |verify_certificate|@>@;@/

