@c prsrclnt.texi
@c This file is part of the Optinum Grid Installer User and Reference Manual.
@c Created by Laurence D. Finston (LDF) Wed May  5 16:02:50 CEST 2010

@c Copyright (C) 2010, 2011, 2012, 2013 Gesellschaft fuer wissenschaftliche Datenverarbeitung mbh Goettingen

@c Author:  Laurence D. Finston (LDF)

@c See the section "GNU Free Documentation License" in the file 
@c fdl.texi for copying conditions.


@c * (1)

@node Parser Client, Entry_Type Reference, Scanner Client, Top

@chapter Parser Client

Unlike the server's parser, the client's parser only processes input
that comes from the peer, not input written by the user or generated
by an external program.  The user controls the behaviour of the client
by means of @ref{Command Line Arguments and Options}, not by means of an input
file.  (It would be possible to change this in the future, if it would
ever seem desirable.)  There is therefore no need for the input format
of the client's parser to be particularly user-friendly.  For example,
all letters in keywords are uppercase.  This is a safety measure that
makes it less likely that an unquoted string would conflict with a
keyword.

@cindex threads
@cindex POSIX threads
@cindex threads, POSIX 
@c
The server uses threads to process the commands sent to it from the
client, so that the order of its responses to the client doesn't
necessarily (and probably won't) correspond to the order of the
commands.  For this reason, the responses must contain more
information than would otherwise be the case.  For example, in the
rule 
@display
@code{SERVER_ZZ PREREQUISITES_ZZ FOR_ZZ ENTRY_ZZ entry_string_list
FOUND_ZZ prerequisite_list},
@end display

@cindex non-terminal symbol
@cindex symbol, non-terminal 
@cindex non-terminals
@noindent
the @dfn{non-terminal symbols} @samp{entry_string_list} and @samp{prerequisite} list contain the
names of the packages specified and possibly their version numbers, so
that it's possible to associate this response with the command that
caused it. 

@c !! PLEASE NOTE:  If this paragraph is changed, it must be changed
@c correspondingly in the ``Terminal Symbols'' section for the server
@c parser (`prsrsrvr.texi')
@c LDF 2010.05.12.

@cindex terminal symbol
@cindex symbol, terminal
@cindex token
@dfn{Terminal symbols} (a.k.a., ``@dfn{tokens}'') in Bison are implemented as
preprocessor macros, defined in the header file created by Bison when
it's invoked using the @code{-d} or @code{--defines} option.  This
header file must be included in all C or @cpp{} source files that
refer to these terminal symbols.  Since CPP (the C preprocessor) has
no concept of namespaces, it is therefore necessary to ensure that the
names of these terminal symbols differ from those of any other
entities defined in the source code.  For this reason, all of the
terminal symbols defined by the programmer (as opposed to Bison
itself) have the suffix ``@code{_ZZ}''.  Similarly, the terminal
symbols in the parser for the server have the suffix ``@code{_YY}'' 
(@pxref{Parser Server}).


@menu
* Parser Client Symbols Rules and States::
* Parser Client Functions::
@end menu


@c ** (2) Parser Client Symbols Rules and States

@node Parser Client Symbols Rules and States, Parser Client Functions, , Parser Client

@section Parser Client Symbols, Rules and States

@ifinfo
This section consists the contents of the file @file{prsrclnt.output}, which is generated automatically 
by Bison and contains information about the client parser.

@verbatiminclude prsrclnt.output
@end ifinfo

@iftex
The contents of the file @file{prsrclnt.output}, which is generated automatically 
by GNU Bison and contains information about the client parser, is contained in a 
separate document.
@end iftex

@c ** (2) Parser Client Functions

@node Parser Client Functions, , Parser Client Symbols Rules and States, Parser Client

@section Parser Client Functions

@cindex Bison
@cindex GNU Bison
@c
@deftypefun int zzparse (@code{yyscan_t} parameter)
Definition generated by GNU Bison.
@end deftypefun




@c * (1) Local Variables for Emacs
  
@c Local Variables:
@c mode:Texinfo
@c abbrev-mode:t
@c eval:(outline-minor-mode t)
@c outline-regexp:"@c *\\*+"
@c eval:(set (make-local-variable 'run-texi2dvi-on-file) "installer.texi")
@c End:
