This is installer.info, produced by makeinfo version 4.13 from
installer.texi.

OptiNum Grid Installer User and Reference Manual, edition 1.0.
The author is Laurence D. Finston.

   Copyright (C) 2010, 2011, 2012, 2013 Gesellschaft fu"r
wissenschaftliche Datenverarbeitung mbH, Go"ttingen, Germany

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being "GWDG Archive Interface User and Reference Manual", and no
     Back-Cover Text.  A copy of the license is included in the section
     entitled "GNU Free Documentation License."

INFO-DIR-SECTION non-GNU packages
START-INFO-DIR-ENTRY
* OptiNum Grid Installer: (GWDG).  OptiNum Grid Installer
END-INFO-DIR-ENTRY


File: installer.info,  Node: Top,  Prev: (dir),  Up: (dir)

   OptiNum Grid Installer User and Reference Manual, edition 1.0.
The author is Laurence D. Finston.

   Copyright (C) 2010, 2011, 2012, 2013 Gesellschaft fu"r
wissenschaftliche Datenverarbeitung mbH, Go"ttingen, Germany

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being "GWDG Archive Interface User and Reference Manual", and no
     Back-Cover Text.  A copy of the license is included in the section
     entitled "GNU Free Documentation License."

* Menu:

* List of Figures::
* Introduction::
* Invoking optdbcli/optdbsrv::
* Using the Server Program optdbsrv::
* Using the Client Program optdbcli::
* Global Variables and Constants optdbcli/optdbsrv::
* Global Functions optdbcli/optdbsrv::
* Server Connection Function Reference::
* Client Connection Function Reference::
* Web Application::
* Software Installation::
* TLS Connections::
* X509_Cert_Type Reference::
* Proxy Credential Function Reference::
* Scanner Server::
* Parser Server::
* Scanner Client::
* Parser Client::
* Entry_Type Reference::
* Distinguished_Name_Type Reference::
* Response_Type Reference::
* Scan_Parse_Parameter_Type Reference::
* Globus_Site_Info_Type Reference::
* Parser Function Reference::
* GPG_Key_Pair_Type Reference::
* Session_Data_Type Reference::
* Utility Function Reference::
* Thread Function Reference::
* Hidden Installation Reference (scrinstl)::
* Auxiliary Program and Shellscript Reference::
* Database Tables and Views::
* Glossary::
* Lists of Source Files::
* FDL::
* GPL::
* Variable Index::
* Data Type Index::
* Function Index::
* Concept Index::

--- The Detailed Node Listing ---

List of Figures

* List of Figures::

Introduction

* Introduction::


--- Building and Installing

* Building and Installing::

--- Server and Client

* Server and Client::
* Database Setup::
* Prerequisites for Building and Installing::

---

Invoking optdbcli/optdbsrv

* Invoking optdbcli/optdbsrv::

* Command Line Arguments and Options::
* Help Options::
* Connection Options::
* X.509 Authentication/Authorization Options::
* Input and Output Options::
* Software Installation Options::
* Debugging Options::
* Session Data Options::
* Alphabetical List of Options::

* Function Reference Invoking::
* Variable Reference Invoking::
* Function Reference Invoking::

---

Using the Server Program optdbsrv

* Using the Server Program optdbsrv::

---

Using the Client Program optdbcli

* Using the Client Program optdbcli::

* How the Client and the Server Communicate::
* How To Read Parser Rules::
* Sample Dialogue::

* Software Package Information (optdbcli)::
* Adding Software Package Information (optdbcli)::
* Deleting Software Package Information (optdbcli)::
* Showing Software Package Information (optdbcli)::

* Setting Effective User (optdbcli)::
* Showing X.509 Certificates (optdbcli)::

* Environment Shellscripts (optdbcli)::
* Sending Environment Shellscripts (optdbcli)::
* Showing Environment Shellscripts (optdbcli)::

* Showing Privileges (optdbcli)::
* Retrieving Information and Installing Locally (optdbcli)::
* Remote Installation (optdbcli)::
* Transferring Proxy Credential  (optdbcli)::

* Globus Sites (optdbcli)::

* Adding Globus Sites (optdbcli)::
* Enabling and Disabling Globus Sites (optdbcli)::
* Deleting and Undeleting Globus Sites (optdbcli)::

* Globus Site Administrators (optdbcli)::

---

Global Variables and Constants optdbcli/optdbsrv

* Global Variables and Constants optdbcli/optdbsrv::

* Global Constants optdbcli/optdbsrv::
* Global Variables optdbcli/optdbsrv::

Global Functions optdbcli/optdbsrv

* Global Functions optdbcli/optdbsrv::

---

Server Connection Function Reference

* Server Connection Function Reference::

* Exchange Data With Client::

---

Client Connection Function Reference

* Client Connection Function Reference::

* Exchange Data With Server::
---

Web Application

* Web Application::

* Accessing the Web Application::
* Data Files Web Application::
* Auxiliary_File_Type::
* Global Variables and Constants Web Application::
* Web Application Functions::
* Scanner Web Application::
* Scanner Web Application Variables::
* Scanner Web Application Functions::
* Parser Web Application::
* Parser Web Application Functions::

Software Installation

* Normal Software Installation::
* Hidden Software Installation::
* Local Software Installation::
* Remote Software Installation::

TLS Connections

* TLS Connections::

* Preprocessor Macros for TLS::
* Types for TLS::
* TLS Variables::
* TLS Functions::

X509_Cert_Type Reference

* X509_Cert_Type Reference::

* X509_Cert_Type Data Members::
* X509_Cert_Type Member Functions::

Proxy Credential Function Reference

* Proxy Credential Function Reference::

Scanner Server

* Scanner Server::

* Scanner Server Variables::
* Scanner Server Functions::

Parser Server

* Parser Server::
* Parser Server Symbols Rules and States::
* Parser Server Functions::

Scanner Client

* Scanner Client::

* Scanner Client Variables::
* Scanner Client Functions::

Parser Client

* Parser Client::
* Parser Client Symbols Rules and States::
* Parser Client Functions::

Entry_Type Reference

* Entry_Type Reference::
* Entry_Type Data Members::
* Entry_Type Member Functions::
* Entry_Type Constructors::
* Entry_Type Operators::
* Entry_Type Other Functions::
* Comparison Classes for Entry_Type::

Distinguished_Name_Type Reference

* Distinguished_Name_Type Reference::

* Distinguished_Name_Type Data Members::
* Distinguished_Name_Type Member Functions::

Response_Type Reference

* Response_Type Reference::

* Response_Type Data Members::
* Response_Type Member Functions::

Scan_Parse_Parameter_Type Reference

* Scan_Parse_Parameter_Type Reference::

* Scan_Parse_Parameter_Type Data Members::

* Scan_Parse_Parameter_Type Member Functions::

* Constructors and Destructor (Scan_Parse_Parameter_Type)::

* Functions for Managing Users::

* Functions for Entries::

* Functions for Adding Entries::
* Functions for Modifying Entries::
* Functions for Deleting Entries::
* Showing Entries::
* Functions for Fetching Entry Information::

* Functions for Prerequisites::

* Database Functions::

* Globus Site Functions::

* Functions for Privileges::

* Environment Shellscript Functions::

* Functions for GPG Keys::

* Session Data Functions::

* Other Scan_Parse_Parameter_Type Member Functions::

* Globus_Site_Info_Type Reference::

* Globus_Site_Info_Type Data Members::

* Globus_Site_Info_Type Member Functions::

Parser Function Reference

* Parser Function Reference::

GPG_Key_Pair_Type Reference

* GPG_Key_Pair_Type Reference::

* GPG_Key_Pair_Type Data Members::
* GPG_Key_Pair_Type Member Functions::

Session_Data_Type Reference

* Session_Data_Type Reference::
* Session_Data_Type Data Members::
* Session_Data_Type Member Functions::

Utility Function Reference

* Utility Function Reference::

---

Thread Function Reference

* Thread Function Reference::
* Remote Installation::
* GPG Key Distribution::
* Cull Database::

---

Hidden Installation Reference (scrinstl)

* Hidden Installation Reference (scrinstl)::

* Global Variables (scrinstl)::
* Global Functions (scrinstl)::

* Distinguished_Name_Type (scrinstl)::
* Distinguished_Name_Type Data Members (scrinstl)::
* Distinguished_Name_Type Member Functions (scrinstl)::

* Parameter_Type (scrinstl)::
* Parameter_Type Data Members (scrinstl)::

Auxiliary Program and Shellscript Reference

* Auxiliary Program and Shellscript Reference::

* Start Remote Installation::
* Kill Process::
* Install GPG Key Pair::
* Change Owner for Installed Files::

* Generate Passwords or Passphrases::

* optpsgen Options::
* optpsgen Global Variables::
* optpsgen Functions::

Database Tables and Views

* Database Tables and Views::

* Users Database Table::
* User_Info Database View::
* Certificates Database Table::
* Privileges Database Table::
* Delegates Database Table::
* Entries Database Table::
* Prerequisites Database Table::
* Globus_Sites Database Table::
* Key_Pairs Database Table::
* Public_Keys Database Table::
* Session_Data Database Table::
* Environment_Shellscripts Database Table::
* Globus_Sites_Admins Database Table::

Glossary

* Glossary::

Lists of Source Files

* Lists of Source Files::

* Client/Server (optdbcli/optdbsrv) Source File List::

* Client/Server (optdbcli/optdbsrv) CWEB Files::
* Client/Server (optdbcli/optdbsrv) Shellscripts::

* Hidden Installation (scrinstl) Source File List::

* Hidden Installation (scrinstl) CWEB Files::
* Hidden Installation (scrinstl) Shellscripts::

* Web Application (optwbsrv) Source File List::

* Web Application (optwbsrv) CWEB Files::
* Web Application (optwbsrv) Shellscripts::

Variable Index

* Variable Index::

Data Type Index

* Data Type Index::

Function Index

* Function Index::

Concept Index

* Concept Index::

FDL

* FDL::

GPL

* GPL::


File: installer.info,  Node: List of Figures,  Next: Introduction,  Up: Top

List of Figures
***************


File: installer.info,  Node: Introduction,  Next: Invoking optdbcli/optdbsrv,  Prev: List of Figures,  Up: Top

1 Introduction
**************

* Menu:

* Building and Installing::
* Communication Among the Programs::

   The OptiNum Grid Installer consists of the following packages:

   * A client/server application `optdbcli/optdbsrv'.  *Note Server
     Connection Function Reference::, and *note Client Connection
     Function Reference::.

   * A web application `optwbsrv'.  *Note Web Application::.

   * A program for "hidden installation" `scrinstl'.  *Note Hidden
     Software Installation::.

Miscellaneous auxiliary programs, shellscripts, etc., are included in
these packages.

   The three individual packages are distributed in the form of
compressed archive files ("zipped tar files" or "tarballs"):

Client/Server           optdbcli/optdbsrv     dbsrvcli-1.0.tar.gz
Web Application         optwbsrv              optwbsrv-1.0.tar.gz
Hidden Installation     scrinstl              scrinstl-1.0.tar.gz


File: installer.info,  Node: Building and Installing,  Next: Communication Among the Programs,  Up: Introduction

1.1 Building and Installing
===========================

* Menu:

* Server and Client::
* Database Setup::
* Prerequisites for Building and Installing::


File: installer.info,  Node: Server and Client,  Up: Building and Installing

1.1.1 Server and Client
-----------------------

Please note that a functioning version of the server `optdbsrv' will
not be built if the MySQL-client library `libmysqlclient' is not
available.  In this case, only the client `optdbcli' will be built.  (A
non-functioning version of `optdbsrv' that issues an error message and
exits will be built.)

   In the future, the client may also require a MySQL database for
handling "session data".  *Note Session_Data_Type Reference::.  If
`libmysqlclient' is not available, then the client should still be
built, but without support for session data.

Unpack the distribution `dbsrvcli-1.0.tar.gz':

     tar xvfz dbsrvcli-1.0.tar.gz

Change the working directory to `./dbsrvcli-1.0':

     cd dbsrvcli-1.0

Run the `configure' script:

     ./configure --prefix=<installation directory>

   For example, to install the package in the working directory, i.e.,
the `dbsrvcli' directory itself, `configure' can be called like this:

     ./configure --prefix=`pwd`

or like this:

     ./configure --prefix=`pwd`

The executable files will be installed in a subdirectory `bin' of the
directory specified as the argument to the `--prefix' option.  If the
latter is not used, they will instead be installed in `/usr/bin', which
requires root privileges.  An "absolute path" must be specified, that
is, not a "relative path" containing `.' or `..'.

Build the package:

     make

Install the package:

     make install

* Menu:

* Database Setup::
* Prerequisites for Building and Installing::


File: installer.info,  Node: Database Setup,  Next: Prerequisites for Building and Installing,  Up: Server and Client

1.1.1.1 Database Setup
......................

This is only needed for the server, since the client doesn't access the
MySQL database.

   The shellscript `crtsrvdb.sh' in `dbsrvcli-1.0/src/DATABASE' can be
used to create the database `dbsrvcli'. It uses the file
`crtsrvdb.sql', which contains SQL code.

   `crtsrvdb.sh' can be called with or without arguments.  If it is
called with no arguments or with `0', `"0"' or `'0'' as the first
argument, `dbsrvcli' will be the name of the database created, which is
what the installer package requires.  For testing purposes, another
name may be passed as the first argument.

   Additional arguments are "users" that will be inserted in order into
the `Users' table.  *Note Users Database Table::.  Please note that in
this case, `0' (or `dbsrvcli') must be passed to `crtsrvdb.sh' as its
first argument, if the database created is to have the default name
`dbsrvcli'.

   If the database to be created already exists, `crtsrvdb.sh' exits
with an error.

   `crtsrvdb.sh' also creates a user `OptiNum', unless this user
already exists.  If it does, a message is issued and the shellscript
continues execution.


File: installer.info,  Node: Prerequisites for Building and Installing,  Prev: Database Setup,  Up: Server and Client

1.1.1.2 Prerequisites
.....................

The client program `optdbcli' has fewer prerequisites than the server
program `optdbsrv'.  If the client doesn't require a package, this is
indicated in the following list.

g++
     The GNU C++ Compiler.

GNU Bison
     The GNU version of the compiler generator `yacc'

Flex
     A free version of the scanner generator `lex'

GNUTLS
     A C library that implements the TLS protocol (formerly SSL)

libtasn1	A C library for processing data
     in "Abstract Syntax Notation One" (ASN.1) format.  Used by GNUTLS.

libgcrypt11 The GNU Crypto Library.
     Used by GNUTLS

CWEB
     A "literate programming" tool for the source code.  CWEB in
     included in both versions of the Installer package and built when
     `make' is invoked.

MySQL
     Database software.  Server only.

For the documentation, the following packages are also required.

Texinfo
     The documentation tool used for creating this handbook.  It is
     currently not required for the client-only version.  However, it
     may be in the future.

TeX
     A package for computer typsetting.  Used by `Texinfo'.


On a GNU/Linux system where `yast2' or `zypper' is available, it should
be possible to install the packages listed here with no difficulty.


File: installer.info,  Node: Communication Among the Programs,  Prev: Building and Installing,  Up: Introduction

1.2 Communication Among the Programs
====================================

[Illustration not available in Info]

[Illustration not available in Info]

[Illustration not available in Info]


File: installer.info,  Node: Invoking optdbcli/optdbsrv,  Next: Using the Server Program optdbsrv,  Prev: Introduction,  Up: Top

2 Invoking optdbcli/optdbsrv
****************************

In order to maintain consistency, the server and the client share the
program code for their command-line options.  The code is located in
the file `cmdlnopt.web'.

   Some options are only used by the server or the client, while others
are interpreted differently by the two programs.

   In the following synopses and list of options, `ARG' without square
brackets indicates a required argument, `[ARG]' an optional one.

     optdbsrv [options] [port number authenticated] \
              [port number non-authenticated]

     optdbcli [options] IP-address_of_server [input filename] \
              [server port number]

   `optdbsrv' has no required arguments.  The defaults for `[port
number authenticated]' and `[port number non-authenticated]' are 5556
and 5557, respectively.  *Note Global Variables and Constants
optdbcli/optdbsrv::.

   `optdbcli' has a single required argument, namely the IP address of
the server to which it should connect.  The IP address may be specified
using digits and periods, e.g., `134.76.20.95' or as the name, e.g.,
`optinum-srv.gwdg.de'.  The default for the `[server port number]'
argument is 5556, if the connection uses X.509 certificate
authentication and 5557 otherwise.

* Menu:

* Command Line Arguments and Options::
* Function Reference Invoking::
* Variable Reference Invoking::
* Function Reference Invoking::


File: installer.info,  Node: Command Line Arguments and Options,  Next: Variable Reference Invoking,  Up: Invoking optdbcli/optdbsrv

2.1 Command Line Arguments and Options
======================================

The command-line options are processed using the C library function
`getopt_long_only' and are handled as described in its GNU/Linux manual
page ("man page").  Single hyphens can be used instead of double
hyphens and unambiguous abbreviations of options are permitted, e.g.,
`--bi' or `-bi' for `--bison-trace'.

   Required arguments may appear following the option with intervening
whitespace or they may be specified like this: `--option=ARG'.   An
optional argument must be specified in the second way, otherwise, it
will be interpreted as a non-option argument.

   Most of the command-line options are associated with "global
variables".  *Note Global Variables optdbcli/optdbsrv::, for more
information.

* Menu:

* Help Options::
* Connection Options::
* X.509 Authentication/Authorization Options::
* Input and Output Options::
* Software Installation Options::
* Debugging Options::
* Session Data Options::
* Alphabetical List of Options::


File: installer.info,  Node: Help Options,  Next: Connection Options,  Up: Command Line Arguments and Options

2.1.1 Help Options
------------------

`--version'
     Server and client.  Outputs program name with version number and
     copyright information and exits

`--help'
     Server and client.  Outputs a help message and a list of options
     and exits.


File: installer.info,  Node: Connection Options,  Next: X.509 Authentication/Authorization Options,  Prev: Help Options,  Up: Command Line Arguments and Options

2.1.2 Connection Options
------------------------

`--port-auth ARG'
`--port-non-auth ARG'
     Server and client.  The ports on which `optdbsrv' listens for
     connections from the client.  `--port-auth' is for connections
     where the user provides an X.509 certificate and key pair and
     `--port-non-auth' is for connections where the user provides a
     "proxy credential".  The values used by the server and client must
     match.  Normally, there should be no need to specify values
     explicitly, unless the default ports (5556 for `--port-auth' and
     5557 for `--port-non-auth') are being used for something else on
     the server-side.


File: installer.info,  Node: X.509 Authentication/Authorization Options,  Next: Input and Output Options,  Prev: Connection Options,  Up: Command Line Arguments and Options

2.1.3 X.509 Authentication/Authorization Options
------------------------------------------------

`--cert-filename ARG'
`--key-filename ARG'
     Server and client.   Filenames of the X.509 certificate and key
     files.  Client:  Authentication and authorization are performed
     using either an X.509 certificate and a private key or a "proxy
     credential" (see option `--proxy-credential', below).  Server:
     The server identifies itself to the client using an X.509
     certificate/key pair.  The default files are `hostcert.pem' and
     `hostkey.pem', respectively, in the directory from which `optdbsrv'
     is called.

`--ca-filename ARG'
     Server and client.  Filename of the "CA certificate", i.e., the
     X.509 certificate of the "certification authority" that issued the
     user certificate.  In the future, it should be possible to use
     this option multiple times so that the server or client can verify
     certificates against more than one CA certificate.  However, this
     has not yet been implemented.

`--crl-filename ARG'
     Server and client.  Revocation list for the CA certificate (see
     `--ca-filename' above).  *Please note:*  This option currently has
     no effect, since the use of revocation lists has not yet been
     implemented.

`--cert-format'
     Certificate format, i.e., X.509 or some other format.  Currently,
     this option isn't used and only X.509 certificates are supported.

`--key-encrypt'
     Currently not used.  The key files for X.509 certificates can be
     encrypted.  At present, the package doesn't support the use of
     encrypted keys.

`--proxy-credential ARG'
     Client only.  A proxy credential containing an X.509
     certificate/key pair issued by a user's certificate, i.e., not a
     certification authority, and usually with a short period of
     validity.  A proxy credential can be generated using the
     shellscript `gen_proxy.sh', which is included in the distribution.
     *Note Client/Server (optdbcli/optdbsrv) Shellscripts::.

`--grid-mapfile ARG'
     Normally, server only.  The grid-mapfile to be used for
     determining the validity of the "Distinguished Name" extracted
     from the proxy credential, when one is used by the client for
     authentication/authorization, and for associating a Distinguished
     Name with a user name.  The default value is
     `/etc/grid-security/grid-mapfile'.

     For testing, this option can be useful for the client as well.
     However, since there is a risk of misuse, it is disabled on the
     the hosts `optinum-srv.gwdg.de', `rocks-goegrid.gwdg.de'
     `optinum.de' and `faui36a.informatik.uni-erlangen.de'.  On all
     other hosts, it is permitted.


File: installer.info,  Node: Input and Output Options,  Next: Software Installation Options,  Prev: X.509 Authentication/Authorization Options,  Up: Command Line Arguments and Options

2.1.4 Input and Output Options
------------------------------

`--input-filename ARG'
     Client only.  The input file contains commands that are sent
     verbatim to the server without processing by the client.

`--output-filename ARG'
     Currently not used.

`--log-filename ARG'
`--error-log-filename ARG'
     Client only.  Filenames for log and error log files.


File: installer.info,  Node: Software Installation Options,  Next: Debugging Options,  Prev: Input and Output Options,  Up: Command Line Arguments and Options

2.1.5 Software Installation Options
-----------------------------------

These options are for the client only.

`--package-name ARG'
     Specifies the name of a package to be installed, if used in
     combination with the `--install' option.  If used in combination
     with the `--fetch' option, the name of a package, for which
     download and installation information should be extracted from the
     database.  See below for information on the `--install' and
     `--fetch' options.

`--package-version [ARG]'
     If the option `--package-name' is specified more than once, and a
     version number is specified for at least one of the packages, then
     `--package-version' must be specified exactly as many times as
     `--package-name', in order to maintain the correspondence between
     package name and package version.  In this case,
     `--package-version' can be specified without an argument as a
     placeholder.

     Please note:  If an argument is specified, it must be specified
     like this:  `--package-version=ARG'.  If it were specified as
     `--package-version ARG', the argument would be interpreted as a
     non-option argument.

`--fetch'
     Causes the server to extract information for the packages specified
     with `--package-name' and possibly `--package-version' from the
     database and send it to the client.

     This information consists of the package name, the package
     version, if any, the download URL and/or command and an
     installation script, if present.  However, the package is not
     downloaded or installed, unless the `--install' is also specified.
     `--install' implies `--fetch', so it is redundant to use `--fetch'
     together with `--install'.  However, it does no harm.

`--install'
     Causes the packages specified with `--package-name' and possibly
     `--package-version' to be installed.  If the
     `--no-resolve-dependencies' is _not_ used, the software
     prerequisites of these packages will also be installed.
     `--resolve-dependencies' can be explicitly specified, but
     resolving dependencies is currently the default behavior.

`--no-install'
     Suppresses installation of packages specified with
     `--package-name' and possibly `--package-version'.  This option
     will normally not be needed, since `--install' must be specified
     explicitly for packages to be installed.  However, it may be
     useful for testing, since this option will suppress installation
     if it appears in an invocation of `optdbcli' following
     `--install'.  (The converse is also true, i.e., installation will
     be performed if `--install' follows `--no-install'.)

`--reinstall'
     Forces reinstallation of the package or packages specified using
     the `--package-name' option.  If one or more of these packages has
     prerequisites, and neither `--no-prerequisites-reinstall' nor
     `--no-resolve-dependencies' has been specified, reinstallation
     will also be forced for the prerequisites.

`--resolve-dependencies'
`--no-resolve-dependencies'
     If `--resolve-dependencies' is specified, the software
     prerequisites for the packages specified with `--package-name' are
     also fetched or installed.  If `--no-resolve-dependencies' is
     specified, this is suppressed.  The default is to resolve
     dependencies.

`--prerequisites-reinstall'
`--no-prerequisites-reinstall'
     Specify that prerequisites should be reinstalled or not.  These
     options can be used if the default behavior is not desired.  This
     is for prerequisites to be handled like the packages specified
     using the `--package-name' option directly, i.e., they are
     reinstalled or not, according to whether the `--install' or
     `--reinstall' option has been used.  However, it may often be
     undesirable for prerequisites to be reinstalled, even when
     reinstalling packages that depend on them.

     Currently, it is only possible to specify how all prerequisites in
     a given run should be handled; it is not possible to make finer
     distinctions, i.e., that the prerequisites of package A should be
     reinstalled, but not the prerequisites of package B.

`--install-directory ARG'
     The directory in which software packages are installed (in their
     own subdirectories).  Default is `$HOME/Installer/'.

`--download-fail-continue'
`--install-fail-continue'
     If used, `optdbcli' will continue to execute if the command for
     downloading and/or installing a package fails.  The default
     behavior is for the `optdbcli' to exit with a non-zero return
     value.  Continuing may be useful when installing multiple packages
     where at least package that's installed later doesn't depend on
     all previous packages having been downloaded and installed
     succesfully.

`--create-links'
`--no-links'
     Create or suppress the creation of "symbolic links" after
     installing one or more software packages.

     As of 2012.02.27, links are created by default.  The author plans
     to change this.

     By default, links are created in `$HOME/bin/', `$HOME/include/',
     `$HOME/lib/' and/or `$HOME/share/', as appropriate.  A directory
     other than `$HOME/' may be specified using the `--link-directory'
     option (see below).

`--link-directory ARG'
     The directory where links are created in subdirectories `bin/',
     `include/', `lib/' and `share/', as appropriate.  The default is
     `$HOME'.  See `--create-links' and `--suppress-links', above.



File: installer.info,  Node: Debugging Options,  Next: Session Data Options,  Prev: Software Installation Options,  Up: Command Line Arguments and Options

2.1.6 Debugging Options
-----------------------

`--trace [ARG]'
     Server and client.  Sets the debugging value for all functions
     that have a `DEBUG' variable and which call the function
     `set_debug_level', which is most of them.  *Note Utility Function
     Reference::.  It also sets the debugging level for the parsing
     functions `yyparse' and `zzparse'.  *Note Parser Server::, and
     *note Parser Client::.  Therefore, the use of the `--bison-trace'
     option (see below) is redundant if `--trace' is used with `ARG' >
     0.

    `ARG' > 0
          Debugging is turned on.

    `ARG' < 0
          Debugging is turned off.

    `ARG' = 0
          Debugging level is left unchanged.

`--bison-trace [ARG]'
`--parser-trace [ARG]'
     Server and client.  These options are synonymous.  They enable
     debugging output for the parsing functions `yyparse' and
     `zzparse'.  *Note Parser Server::, and *note Parser Client::.

    No argument
          Debugging output automatically generated by Bison

    `ARG' <= 0
          No debugging output

    `ARG' = 1
          Programmed debugging output from actions only

    `ARG' > 1
          Automatically generated and programmed debugging output

    Invalid (non-integer) argument
          No debugging output

`--flex-trace'
`--scanner-trace'
     Server and client.  These options are synonymous.  They enable
     debugging output for the scanning functions `yylex' and `zzlex'.
     *Note Scanner Server::, and *note Scanner Client::.

`--save-temp-files'
     Server and client.  For debugging.  Disables deletion of temporary
     files created by the programs.

`--sleep ARG'
     Server and client.  For debugging and testing threads in the
     server.



File: installer.info,  Node: Session Data Options,  Next: Alphabetical List of Options,  Prev: Debugging Options,  Up: Command Line Arguments and Options

2.1.7 Session Data Options
--------------------------

`--session-id ARG'
     Client only.  This option primarily intended for use with the web
     application in order to maintain a "state" encompassing multiple
     invocations of the client program `optdbcli'.  It must be used in
     combination with the `session_id' command in the input sent to the
     server; otherwise it has no effect.   If the session ID `ARG'
     doesn't match the session ID, which the server sends back to the
     client, the client exits with an error.  *Note Session_Data_Type
     Reference::.



File: installer.info,  Node: Alphabetical List of Options,  Prev: Session Data Options,  Up: Command Line Arguments and Options

2.1.8 Alphabetical List of Options
----------------------------------

`--bison-trace'
     *note Debugging Options::.

`--ca-filename'
     *note X.509 Authentication/Authorization Options::.

`--cert-filename'
     *note X.509 Authentication/Authorization Options::.

`--cert-format'
     *note X.509 Authentication/Authorization Options::.

`--create-links'
     *note Software Installation Options::.

`--crl-filename'
     *note X.509 Authentication/Authorization Options::.

`--download-fail-continue'
     *note Software Installation Options::.

`--error-log-filename'
     *note Input and Output Options::.

`--fetch'
     *note Software Installation Options::.

`--flex-trace'
     *note Debugging Options::.

`--grid-mapfile'
     *note X.509 Authentication/Authorization Options::.

`--help'
     *note Help Options::.

`--input-filename'
     *note Input and Output Options::.

`--install'
     *note Software Installation Options::.

`--install-directory'
     *note Software Installation Options::.

`--install-fail-continue'
     *note Software Installation Options::.

`--key-encrypt'
     *note X.509 Authentication/Authorization Options::.

`--key-filename'
     *note X.509 Authentication/Authorization Options::.

`--link-directory'
     *note Software Installation Options::.

`--log-filename'
     *note Input and Output Options::.

`--no-install'
     *note Software Installation Options::.

`--no-links'
     *note Software Installation Options::.

`--no-prerequisites-reinstall'
     *note Software Installation Options::.

`--no-resolve-dependencies'
     *note Software Installation Options::.

`--output-filename'
     *note Input and Output Options::.

`--package-name'
     *note Software Installation Options::.

`--package-version'
     *note Software Installation Options::.

`--parser-trace'
     *note Debugging Options::.

`--port-auth'
     *note Connection Options::.

`--port-non-auth'
     *note Connection Options::.

`--prerequisites-reinstall'
     *note Software Installation Options::.

`--proxy-credential'
     *note X.509 Authentication/Authorization Options::.

`--reinstall'
     *note Software Installation Options::.

`--resolve-dependencies'
     *note Software Installation Options::.

`--save-temp-files'
     *note Debugging Options::.

`--scanner-trace'
     *note Debugging Options::.

`--session-id'
     *note Session Data Options::.

`--sleep'
     *note Debugging Options::.

`--trace'
     *note Debugging Options::.

`--version'
     *note Help Options::.



File: installer.info,  Node: Variable Reference Invoking,  Next: Function Reference Invoking,  Prev: Command Line Arguments and Options,  Up: Invoking optdbcli/optdbsrv

2.2 Variable Reference
======================

The following variables and functions are defined in `cmdlnopt.web'.

 -- Global variables: vector<string> cert_filenames
 -- : vector<string> key_filenames

 -- Global variables: vector<string> ca_filenames
 -- : vector<string> crl_filenames
     These variables are used by the server only.


File: installer.info,  Node: Function Reference Invoking,  Prev: Variable Reference Invoking,  Up: Invoking optdbcli/optdbsrv

2.3 Function Reference
======================

 -- Function: int process_command_line_options (int ARGC, char* ARGV[])

 -- Function: int show_filename_arguments (void)
     Show filename arguments for certificates, keys, CAs
     ("Certification Authorities"), and CRLs ("Certificate Revocation
     Lists").  For debugging.


File: installer.info,  Node: Using the Server Program optdbsrv,  Next: Using the Client Program optdbcli,  Prev: Invoking optdbcli/optdbsrv,  Up: Top

3 Using the Server Program optdbsrv
***********************************

Starting the server program `optdbsrv' is simpler than starting the
client.  Normally, it should suffice to start it without any arguments.
For testing purposes, it can be called like this:

     optdbsrv

   In this case, it will listen on port 5556 for connections from
clients using authentication with X.509 certificates and on port 5557
for clients that use an "X.509 proxy credential" to identify
themselves.  (Other ports can be specified with the `--port-auth' and
`port-non-auth' options, if desired.  *Note Connection Options::.)  The
defaults for the certificates used are `DFN-VereinPCAGrid-G01.pem' for
the CA certificate and `hostcert.pem' and `hostkey.pem' for the
certificate and key used by the server to identify itself to the client.

   In production use, the server will normally run continuously in the
background as a "daemon" process and should therefore be invoked as
follows:

     nohup ./optdbsrv 2>&1 &

   The final ampersand places the process in the background while
`nohup' ensures that it will continue to run after the user that starts
it logs out.  It would be a good idea to create a user _without_ root
permissions for the purpose of running `optdbsrv', and perhaps for
other tasks connected with the Installer package.

   Any output written by `optdbsrv' to standard output or standard
error will be redirected to `nohup.out'.  (`2>&1' redirects standard
error to standard output while the latter is redirected to
`nohup.out'.)  Whoever is responsible for administering `optdbsrv'
should ensure that this file is truncated once in a while, so it
doesn't grow too large.

   For testing purposes, `optdbsrv' can simply be invoked from the
command line (i.e., as a foreground process):

     ./optdbsrv

The options `--bison-trace', `--flex-trace' and/or `--trace' can be
specified for more debugging output.  (In addition, `--parser-trace'
and `--scanner-trace' are synonyms for `--bison-trace' and
`--flex-trace', respectively.)

   The option `--trace', with no argument or a numerical argument > 0,
causes debugging information for most if not all of the functions that
are called while `optdbsrv' is running.  *Note Invoking
optdbcli/optdbsrv::, for more information about these options and
others that can be used when invoking `optdbsrv'.  *Note Debugging
Options::, for more information.


File: installer.info,  Node: Using the Client Program optdbcli,  Next: Global Variables and Constants optdbcli/optdbsrv,  Prev: Using the Server Program optdbsrv,  Up: Top

4 Using the Client Program optdbcli
***********************************

Most users will only require the client program `optdbcli' and won't
need to build, install or run the server program `optdbsrv', as long as
there's an instance of the latter running somewhere to which the client
can connect.

   `optdbcli' is used for several different purposes:

  1. Storing information in the remote software database administered by
     `optdbsrv'

  2. Initiating a remote software installation on the cluster front-end
     computer associated with a Globus site

  3. Fetching information about software packages from the remote
     database and installing the software on the local machine where
     `optdbcli' is running

  4. Fetching and displaying information from various tables of the
     remote database

  5. For users who are responsible for maintaining information about
     Globus sites, certain administrative tasks can be performed using
     `optdbcli' instead of accessing the database using a MySQL client
     (such as `mysql').

   In the first two cases, commands, either from a a file or passed to
`optdbcli' via standard input, are sent by `optdbcli' to the server
program `optdbsrv'.  They are not processed in any way by `optdbcli'.

   In the third case, no input file or input from a pipe is used,
because in the "normal" case of a remote installation, `optdbcli' is
called as part of a "Globus job" and there is no way of passing it input
in either of these ways, at least not at present.  Instead, the command
line options `--install' or `--reinstall' together with the options
`--package-name' and optionally `--package-version' are used to control
the operation of `optdbcli'.

   Let's assume that the server `optdbsrv' is running on
`optinum-srv.gwdg.de' and that the file `input.txt' contains commands
for telling the server to store information about software packages and
how to install them in the database for the user who's invoking the
client.  The contents of `input.txt' can be sent to the server in the
following, equivalent ways:

`optdbcli --input-file input.txt optinum-srv.gwdg.de'

`optdbcli --input-file=input.txt optinum-srv.gwdg.de'

`optdbcli --input-file "input.txt" optinum-srv.gwdg.de'

`optdbcli optinum-srv.gwdg.de input.txt 5556'

`cat input.txt | optdbcli optinum-srv.gwdg.de'

Arguments may be quoted to prevent expansion by the shell (*note Shell
Expansion: (bash)Shell Expansion.).  *Note Invoking
optdbcli/optdbsrv::, for details about options and their arguments.

   These invocations assume that the user's certificate and private key
file and are in the default location, namely
`$HOME/.globus/usercert.pem' and `$HOME/.globus/userkey.pem',
respectively.  In addition, it assumes that the "CA certificate"
(Certificate Authority certificate) is also in the default location,
which is determined by means of conditionally compiled code.  If these
files are not in the default locations, they must be specified using
the options `--cert-filename', `--key-filename' and/or `--ca-filename'.
In addition, the default filenames may be changed in the source code
before building the package, if desired.

   *Please note* that the default value for the path of the CA
certificate is the empty string for platforms that are not among the
ones referred to specifically in the conditionally compiled code!  It
will therefore normally be necessary to specify the CA certificate
using the `--ca-filename' option.

* Menu:

* How the Client and the Server Communicate::
* How To Read Parser Rules::
* Sample Dialogue::
* Software Package Information (optdbcli)::
* Setting Effective User (optdbcli)::
* Showing X.509 Certificates (optdbcli)::
* Environment Shellscripts (optdbcli)::
* Showing Privileges (optdbcli)::
* Retrieving Information and Installing Locally (optdbcli)::
* Remote Installation (optdbcli)::
* Transferring Proxy Credential (optdbcli)::
* Globus Sites (optdbcli)::
* Globus Site Administrators (optdbcli)::


File: installer.info,  Node: How the Client and the Server Communicate,  Next: How To Read Parser Rules,  Up: Using the Client Program optdbcli

4.1 How the Client and the Server Communicate
=============================================

When `optdbcli' is invoked, input can be passed to it:

  1. as the argument to the `--input-filename' option

  2. as a non-option filename argument following the name or IP address
     of the machine where the server program is running (e.g.,
     `optinum-srv.gwdg.de test_input.txt')

  3. through a pipe to its standard input.  In this case, the input
     need not be stored in a file, it could be a string argument to the
     `echo' command or the output of another command or program.

*Note Invoking optdbcli/optdbsrv::.

   `optdbcli' does not process these commands in any way, but passes
them unexamined to `optdbsrv', following the "handshake procedure",
i.e., authentication/authorization using an X.509 certificate/private
key pair or an X.509 proxy credential, and the establishment of secure
communication using the GNUTLS library, which implements the TLS 1.0
protocol.

   `optdbcli' and `optdbsrv' each contains its own "parser function",
`yyparse' for `optdbsrv' and `zzparse' for `optdbcli'.  *Note Parser
Client Functions::, and *note Parser Client Functions::.  A parser
function in effect implements a "language" that a computer program
"understands", so to speak.

   The parser functions `yyparse' and `zzparse' are generated by the
program GNU Bison from input in a special format that generates "rules
of grammar" and specifies actions to be taken when input to the program
"matches" the rules.  For more information about GNU Bison, parsing,
etc., see *note Bison: (bison)Top.

   `optdbcli' and `optdbsrv' have different parser functions and
therefore each has its own "language".  They communicate by sending
each other messages using each other's language.  That is, `optdbcli'
sends messages to `optdbsrv' in `optdbcli's' language and `optdbsrv'
sends messages back to `optdbcli' in `optdbcli''s.  This implies that
the programs send messages that they themselves wouldn't be able to
interpret, but there is no need for them to be able to do this.

   The commands in the input that can be passed to `optdbcli' are in
the "`optdbsrv' language".  Certain command-line options to `optdbcli'
also cause it to send commands to `optdbsrv'.  The latter then takes
action on these commands, where appropriate, and sends commands back to
`optdbcli', which may react by sending more commands back to
`optdbsrv'.  This continues until both partners are finished sending
commands to the peer.  At this point, the connection is ended (normally
by `optdbcli', unless there's an error).  *Note Exchange Data With
Client::, and *note Exchange Data With Server::.


File: installer.info,  Node: How To Read Parser Rules,  Next: Sample Dialogue,  Prev: How the Client and the Server Communicate,  Up: Using the Client Program optdbcli

4.2 How To Read Parser Rules
============================

The following sections provide examples of commands that can appear in
the input file.  For complete information about the symbols, grammar
rules and states of `yyparse', i.e., the parser function for
`optdbsrv', *note Parser Server::.

   This is an example of a parser rule:

     program: statement_list END

Parser rules have a "left-hand" and a "right-hand side", separated by
the symbol `:'.  The items that appear in a parser rule are either
"terminal" or "non-terminal symbols".  In this manual, terminal symbols,
also known as "tokens",  are printed in uppercase, like `END' in this
example.  Non-terminal symbols are printed in lowercase, and surrounded
by angle braces, like `<program>' and `<statement_list>' in this
example.

   Only a single, non-terminal symbol can ever appear on the left-hand
side of a rule, like `<program>' in this example.  Non-terminal symbols
can also appear on the right-hand sides of rules, like
`<statement_list>' in this example, while terminal symbols can only
appear on the right-hand side of parser rules.

   In the reference sections *note Parser Server:: and *note Parser
Client:: you will see that the terminal symbols all end in `_YY' or
`_ZZ', respectively.  This is because terminal symbols are implemented
in the C code as preprocessor macros, the definitions appear in the
header file generated by `bison' and the latter is included by various
other source files.  The suffixes `_YY' and `_ZZ' help to ensure that
these names won't interfere with the names of other entities in the
source code, e.g., variables, functions, other preprocessor macros,
etc.  _In this section and other other sections containing examples of
parser rules, the suffixes are omitted for the sake of better
readability._

   The non-terminal symbol on the left-hand side is the "target" of the
rule.  It "maps to" the sequence of items on the right-hand side of the
rule.  When the `optdbsrv' or `optdbcli' receives input, the scanner
function `yyscan' or `zzscan', respectively, converts the stream of
characters into a sequence of tokens (i.e., terminal symbols) and
passes the latter to the parser function `yyparse' or `zzparse',
respectively.

   The parser function matches the sequence of tokens to its set of
rules "reducing" as it proceeds.  If the sequence of tokens fails to
match the grammar rules defined by the Bison code, this causes an error.

   A single left-hand side can map to more than one right-hand side:

     download_info: DOWNLOAD_URL | DOWNLOAD_COMMAND | download_info_encrypted

The `|' symbol stands for "or".  The previous example is thus
equivalent to:

     download_info: DOWNLOAD_URL
     download_info: DOWNLOAD_COMMAND
     download_info: download_info_encrypted

That is, DOWNLOAD_URL, DOWNLOAD_COMMAND, and <download_info_encrypted>
all "reduce to" <download_info>.

   Many rules contain the special "symbol" `(Empty)', which stands for
"nothing" or "no symbol at all", e.g.,

     statement_list: (Empty) | statement_list statement

This means that a <statement_list> may be empty, i.e., map to no
symbols at all, or it may map to a <statement_list> followed by a
<statement>.  This is an example of a "recursive rule", where the
non-terminal on the left-hand side also appears on the right-hand side
of the rule.  This example means that a <statement_list> can be nothing
or a <statement_list> followed by a <statement>.  In this way, a
<statement_list> can be constructed from an unlimited number of
statements, including no statements at all!

   For example, input containing only END is valid for `optdbsrv':

     echo "END" | optdbcli localhost

`optdbcli' sends the input to `optdbsrv'.  The scanner function
`yyscan' converts the character `E', `N' and `D' to the token `END'
(really `END_YY', as explained above) and passes the latter to the
parser function `yyparse'.  From the point of view of `yyparse', a
<program> is a <statement_list> followed by the terminal symbol END.
The "nothing" preceding END matches the rule `<statement_list> :
(Empty)', reducing to <statement_list>, which, followed by the END
token, in turn matches the rule `<program> : <statement_list> END',
ending execution successfully.

   `(Empty)' can also be used for "options", i.e., elements of commands
which may appear or be left out, e.g.,

     statement: SHOW CERTIFICATE USER html_optional
              | SHOW CERTIFICATES ALL html_optional

     html_optional: (Empty)| HTML

If the option `HTML' is used, the output is formatted as for a web
page, using HTML commands.  If left out, it is formatted as plain text.

   Implementing options by means of rules with empty right-hand sides in
this way usually works well, but occasionally it causes reduce/reduce
conflicts in the grammar, whereby there is no obvious reason why it
should occur in one case but not in another.  In such cases, the
grammar must be reformulated in order to remove the conflicts.  *Note
Reduce/Reduce Conflicts: (bison)Reduce/Reduce, and *note Bison Grammar
Files: (bison)Grammar File, for more information about Bison grammars
in general.

   There is nearly a one-to-one correspondence between the commands a
user writes and the parser rules for `yyparse', except for the ones
that process messages returned from `optdbcli'.  Most of the terminal
symbols correspond to keywords of the "optdbsrv" language, such as
`SHOW', `HTML', `FOR', `TO', etc.  It is not necessary to type them in
uppercase, as in the descriptions of the parser rules;  they can be
typed either in uppercase or lowercase, but the cases cannot be mixed
within a single word, e.g.,

     show entries user
     SHOW ENTRIES USER
     SHOW entries USER
     show ENTRIES user
     etc.,

are all valid, but not `sHow eNtrIES uSer'.

   The following terminal symbols, however, do not refer to keywords:

`INTEGER'
     An optional sign `+' or `-', followed by one or more decimal
     digits 0-9.

`STRING'
     Strings may contain the alphanumerical characters and a selection
     of special characters.  This selection may need to be extended
     depending on what characters are used in URLs, filenames, or other
     items that can appear in commands for `optdbsrv'.  The selection
     is determined by the corresponding rules in the file
     `scanner.web', from which the input file for Flex is generated.

     Strings may be undelimited or delimited by double quotation marks
     (`"') or angle braces (`<>').

`SEMI_COLON'
`SLASH'
     Punctuation characters in the input are converted to
     appropriately-named tokens.  Currently, these are the only
     punctuation characters used in the input for `optdbsrv'.

   Some other terminal or non-terminal symbols may appear in rules that
do not correspond to commands which would ever be written by a user,
but which are generated by `optdbcli' as responses and sent back to
`optdbsrv'.


File: installer.info,  Node: Sample Dialogue,  Next: Software Package Information (optdbcli),  Prev: How To Read Parser Rules,  Up: Using the Client Program optdbcli

4.3 Sample Dialogue
===================

The following is a sample dialogue between the client program
`optdbcli' and the server program `optdbsrv', leaving out a couple of
less interesting steps.

   (Illustration not available in Info format)


File: installer.info,  Node: Software Package Information (optdbcli),  Next: Setting Effective User (optdbcli),  Prev: Sample Dialogue,  Up: Using the Client Program optdbcli

4.4 Software Package Information
================================

* Menu:

* Adding Software Package Information (optdbcli)::
* Deleting Software Package Information (optdbcli)::
* Showing Software Package Information (optdbcli)::


File: installer.info,  Node: Adding Software Package Information (optdbcli),  Next: Deleting Software Package Information (optdbcli),  Up: Software Package Information (optdbcli)

4.4.1 Adding Software Package Information
-----------------------------------------

     statement: START_ENTRY entry_statement_list END_ENTRY

     entry_statement_list: /* empty */
                         | entry_statement_list keyword_value_pair
                         | entry_statement_list prerequisite_statement
                         | entry_statement_list PRIVATE
                         | entry_statement_list PUBLIC

     keyword_value_pair: PACKAGE_NAME STRING
                       | PACKAGE_VERSION STRING
                       | PACKAGE_VERSION INTEGER
                       | DOWNLOAD_URL STRING
                       | DOWNLOAD_URL_ENCRYPTED STRING
                       | DOWNLOAD_COMMAND STRING
                       | DOWNLOAD_COMMAND_ENCRYPTED STRING
                       | INSTALLATION_SCRIPT STRING
                       | INSTALLATION_SCRIPT_ENCRYPTED STRING
                       | OWNER STRING
                       | AUTHORIZATION STRING

     prerequisite_statement: PREREQUISITE STRING
                           | PREREQUISITE STRING STRING

In the sample dialogue above, the user passes the following input to
`optdbcli', which sends it on to to `optdbsrv':

     START_ENTRY
     PACKAGE_NAME    m4
     PACKAGE_VERSION 1.4.15
     DOWNLOAD_URL    http://ftp.gnu.org/gnu/m4/m4-1.4.15.tar.gz
     INSTALLATION_SCRIPT "m4_install.sh"
     END_ENTRY

     END

Here, the `DOWNLOAD_URL' keyword is used.  When `optdbcli' is invoked
at a later time to initiate the installation of `m4 1.4.15', `wget' is
used to download the compressed archive file ("gzipped tar file" or
"tarball") `m4-1.4.15.tar.gz' located at
`http://ftp.gnu.org/gnu/m4/m4-1.4.15.tar.gz'.

   This approach will not work for packages that cannot simply be
download in this way.  For example,

     DOWNLOAD_COMMAND git clone git://git.savannah.gnu.org/m4.git

In this case, the download URL and the filename for the installation
script don't require quoting, since they don't contain any whitespace
or characters that might be interpreted as "wildcards" for expansion in
the course of processing by the server.  Nonetheless, it is safest to
quote download URLs just in case.  Double quotation marks, as above, or
angle braces (<>) may be used.

   [Table not available in Info]

   [Table not available in Info]


File: installer.info,  Node: Deleting Software Package Information (optdbcli),  Prev: Adding Software Package Information (optdbcli),  Up: Software Package Information (optdbcli)

4.4.2 Deleting Software Package Information
-------------------------------------------

     statement:   MARK AS DELETED ENTRY entry_string_list
                | MARK AS DELETED ALL ENTRIES FOR USER
                | UNDELETE ENTRY entry_string_list
                | UNDELETE ALL DELETED ENTRIES FOR USER
                | DELETE ENTRY entry_string_list FINALLY
                | DELETE ALL ENTRIES FOR USER FINALLY
                | DELETE PREREQUISITE prerequisite_string_list FOR ENTRY entry_string_list
                | DELETE PREREQUISITES FOR ENTRY entry_string_list

     entry_string_list: /* empty */ | entry_string_list STRING

     prerequisite_string_list:   /* empty */
                               | prerequisite_string_list STRING

A software package entry can be marked for deletion, for example:

     mark as deleted entry "hello" "2.7"
     =>
     Marked entry `hello 2.7' as deleted successfully.

     show entry hello 2.7
     =>
     *** User Entries ***

     user_id:                        1
     commonName:                     Laurence Finston
     organizationalUnitName:         Gesellschaft fuer wissenschaftliche \
                                     Datenverarbeitung mbH
     countryName:                    DE
     entry_id:                       1
     package_name:                   hello
     package_version:                2.7
     version_ctr:                    NULL
     download_url: \
        ftp://ftp.gwdg.de/pub/gnu/ftp/gnu/hello/hello-2.7.tar.gz
     download_command:               NULL
     maintainer_name:                NULL
     maintainer_email_address:       NULL
     private:                        0
     checked_by_admin:               0
     installation_script:            PRESENT
     created:                        2012-05-21 12:16:25 UTC
     last_modified:                  2012-05-21 14:19:12 UTC
     encrypted:                      0
     owner:                          NULL
     download_url_encrypted:         NULL
     download_command_encrypted:     NULL
     installation_script_encrypted:  NULL

     authorization:                  NULL

     deleted:                        1

The `deleted' field is set to 1 (`true') and the timestamp in the
`last_modified' field is updated.  The entry will now remain in the
database for approximately 24 hours before being deleted by the
function `cull_database' (*note Cull Database::).  This function runs
in a thread of its own and "wakes up" every two hours to delete expired
items from the database.  A software package entry that has been marked
for deletion should therefore never remain in the `Entries' table for
more than 26 hours plus a few seconds.

   Between the time that an entry has been marked for deletion and the
time it's actually deleted, it will still be shown by a `show' command
and _and can still be installed_.  It can also be "undeleted", if the
user decides that it's needed after all:

     undelete entry hello 2.7
     =>
     Unmarked entry `hello 2.7' as deleted successfully.

   The `delete ... finally' commands delete one or more entries
"irrevocably"(1):

     delete entry hello 2.7 finally
     =>
     Deleted entry `hello 2.7'.

   Marking an entry for deletion that's already been marked or
undeleting one that hasn't been marked for deletion has no effect.  Nor
does marking or undeleting a non-existent entry.  However, in all of
these cases the server sends a warning to the client:

     mark as deleted entry bison 2.4.3
     =>
     Marked entry `bison 2.4.3' as deleted successfully.

     mark as deleted entry bison 2.4.3
     =>
     WARNING!  Failed to mark entry `bison 2.4.3' as deleted:
     Entry already marked for deletion.
     Continuing.
     WARNING!  In `main':  `warnings_occurred' == 1
     (No errors)
     See error logfile `/tmp/optdbcli_error.log.JV95cR' and/or \
        logfile `/tmp/optdbcli.log.pXk2pp' for more information.
     Exiting function with return value 4.

     delete entry bison 2.4.3 finally
     =>
     Deleted entry `bison 2.4.3'.

     delete entry bison 2.4.3 finally
     =>
     WARNING!  Failed to delete entry `bison 2.4.3'.  Continuing.
     WARNING!  In `main':  `warnings_occurred' == 1
     (No errors)
     See error logfile `/tmp/optdbcli_error.log.GT0Rhp' and/or \
        logfile `/tmp/optdbcli.log.uM6H0M' for more information.

   When software package entries are deleted "finally", or "culled"
from the `Entries' database table by `cull_database', rows in the
`Prerequisites' table that refer to these packages are deleted, too.
Please note that they are _not_ deleted when a package has merely been
marked for deletion.  Otherwise, the information in the `Prerequisites'
table would be lost, if the package were undeleted before being deleted
finally.

   In the following example, `m4 1.4.15' is a prerequisite of both
`bison 2.4.3' and `hello 2.7'.  After the entry for `m4 1.4.15' has
been deleted, it is no longer a prerequisite of the other packages:

     show entries user with_dependents with_prerequisites
     =>
     *** User Entries ***

     user_id:                        1
     commonName:                     Laurence Finston
     organizationalUnitName:         Gesellschaft fuer wissenschaftliche \
                                        Datenverarbeitung mbH
     countryName:                    DE
     entry_id:                       1
     package_name:                   bison
     package_version:                2.4.3
     [...]
     deleted:                        0

     Prerequisites:                  m4 1.4.15

     No dependents


     user_id:                        1
     commonName:                     Laurence Finston
     organizationalUnitName:         Gesellschaft fuer wissenschaftliche \
                                        Datenverarbeitung mbH
     countryName:                    DE
     entry_id:                       2
     package_name:                   hello
     package_version:                2.7
     [...]
     deleted:                        0

     Prerequisites:                  m4 1.4.15

     No dependents


     user_id:                        1
     commonName:                     Laurence Finston
     organizationalUnitName:         Gesellschaft fuer wissenschaftliche \
                                        Datenverarbeitung mbH
     countryName:                    DE
     entry_id:                       3
     package_name:                   m4
     package_version:                1.4.15
     [...]
     deleted:                        0

     No prerequisites

     Dependents:                     bison 2.4.3
                                     hello 2.7

     delete entry m4 1.4.15 finally
     =>
     Deleted entry `m4 1.4.15'.

     show entries user with_dependents with_prerequisites
     =>
     *** User Entries ***

     user_id:                        1
     commonName:                     Laurence Finston
     organizationalUnitName:         Gesellschaft fuer wissenschaftliche \
                                        Datenverarbeitung mbH
     countryName:                    DE
     entry_id:                       1
     package_name:                   bison
     package_version:                2.4.3
     [...]

     deleted:                        0

     No prerequisites

     No dependents


     user_id:                        1
     commonName:                     Laurence Finston
     organizationalUnitName:         Gesellschaft fuer wissenschaftliche \
                                        Datenverarbeitung mbH
     countryName:                    DE
     entry_id:                       2
     package_name:                   hello
     package_version:                2.7
     [...]
     deleted:                        0

     No prerequisites

     No dependents

   See also *note Functions for Deleting Entries::.

   ---------- Footnotes ----------

   (1) Of course, a new entry containing the same data can be created
again at any time.


File: installer.info,  Node: Showing Software Package Information (optdbcli),  Up: Software Package Information (optdbcli)

4.4.3 Showing Software Package Information
------------------------------------------

The `show entries' command is used for fetching information about
software packages from the database and displaying them on the user's
computer terminal.

   The complete syntax of the `show entries' command is as follows:

     statement:   SHOW ENTRY entry_string_list show_option_list
                | SHOW ENTRIES show_option_list

     show_option_list: /* empty */
                     | show_option_list show_option

     show_option: ALL
                | USER
                | PUBLIC
                | WITH_PREREQUISITES
                | WITH_DEPENDENTS
                | WITH_INSTALLATION_SCRIPT
                | HTML
                | JAVASCRIPT
                | LEVELS level_list

     level_list: /* empty */
               | level_list INTEGER INTEGER
               | level_list INTEGER INTEGER SEMI_COLON
               | level_list INTEGER INTEGER SLASH

   Example:

     show entries user
     =>
     *** User Entries ***

     user_id:                        1
     commonName:                     Laurence Finston
     organizationalUnitName:         Gesellschaft fuer wissenschaftliche \
                                        Datenverarbeitung mbH
     countryName:                    DE
     entry_id:                       1
     package_name:                   hello
     package_version:                2.7
     version_ctr:                    NULL
     download_url:                   ftp://ftp.gwdg.de/pub/gnu/ftp/gnu/\
                                        hello/hello-2.7.tar.gz
     download_command:               NULL
     maintainer_name:                NULL
     maintainer_email_address:       NULL
     private:                        0
     checked_by_admin:               0
     installation_script:            PRESENT
     created:                        2012-05-14 13:00:45 UTC
     last_modified:                  2012-05-14 13:00:45 UTC
     encrypted:                      0
     owner:                          NULL
     download_url_encrypted:         NULL
     download_command_encrypted:     NULL
     installation_script_encrypted:  NULL

     authorization:                  NULL

     deleted:                        0

   See also *note Showing Entries::.


File: installer.info,  Node: Setting Effective User (optdbcli),  Next: Showing X.509 Certificates (optdbcli),  Prev: Software Package Information (optdbcli),  Up: Using the Client Program optdbcli

4.5 Setting Effective User
==========================

     statement: SET EFFECTIVE_USER STRING

`STRING' is the Distinguished Name of another user.

   Example:
     SET EFFECTIVE_USER "/C=DE/O=GridGermany/OU=Gesellschaft fuer \
        wissenschaftliche Datenverarbeitung mbH/CN=Laurence Finston"
     =>
     Set effective user succeeded.

   This command can only be executed by a user who is permitted to act
as a "delegate" for the user referred to by the Distinguished Name
(`STRING') argument.  That is, there must be a corresponding row in the
`Delegates' database table (*note Delegates Database Table::) or the
user who executes the command must have the `superuser' privilege.
*Note Privileges Database Table::.  Otherwise, an error message is
issued and `optdbcli' exits:

     SET EFFECTIVE_USER "/C=DE/O=GridGermany/OU=Gesellschaft fuer \
        wissenschaftliche Datenverarbeitung mbH/CN=Laurence Finston"
     =>
     ERROR:  In `zzparse':
     Set effective user failed.
     Exiting `zzparse' unsuccessfully With return value 1.
     ERROR!  In `exchange_data_with_server':  `zzparse' returned  1

     Exiting function unsuccessfully with return value 1.
     ERROR!  (3) In `client_connect_auth':  `exchange_data_with_server' \
        failed, returning 1:
     Exiting function unsuccessfully with return value 1.
     ERROR!  In `main':  `client_connect_auth' failed, returning 1
     `errors_occurred' == 2
     `warnings_occurred' == 0
     See error logfile `/tmp/optdbcli_error.log.AL2MbF' and/or \
        logfile `/tmp/optdbcli.log.dkHaAP' for more information.
     Exiting `main' unsuccessfully with exit value 1.


File: installer.info,  Node: Showing X.509 Certificates (optdbcli),  Next: Environment Shellscripts (optdbcli),  Prev: Setting Effective User (optdbcli),  Up: Using the Client Program optdbcli

4.6 Showing X.509 Certificates
==============================

The complete syntax of the `show certificates' command is as follows:

     statement: SHOW CERTIFICATE USER html_optional
              | SHOW CERTIFICATES ALL html_optional

     html_optional: /* empty */
                  | HTML

   Any user can show the data stored in the remote database for his or
her own X.509 certificate, i.e., the row for that user in the
`Certificates' database table.  *Note Certificates Database Table::.
There should be row for all users;  if there isn't, `optdbcli' should
have exited.

   Only users with at least one of the privileges `superuser',
`show_certificates', `add_globus_site_admin', or
`delete_globus_site_admin' may show certificate information for other
users.

   Users who can add or delete administrators of the data pertaining to
Globus sites in the `Globus_Sites' database table must be able to view
the certificate information in order to find the user IDs for the `add
admin globus_site' and  `delete admin globus_site' commands.  *Note
Globus_Sites Database Table::, and *note Globus_Sites_Admins Database
Table::.

   Normally, the `show_certificates' should be set for these users, but
the function `Scan_Parse_Parameter_Type::edit_globus_site_admin' will
check `add_globus_site_admin' or `delete_globus_site_admin', as
appropriate, just in case it isn't.  *Note Globus Site Functions::.

   If a user without at least one of these privileges sends the command
`show certificates all' to the server, his or her own certificate data
will be shown and a warning will be issued that the user may not view
the certificate data for other users.


File: installer.info,  Node: Environment Shellscripts (optdbcli),  Next: Showing Privileges (optdbcli),  Prev: Showing X.509 Certificates (optdbcli),  Up: Using the Client Program optdbcli

4.7 Environment Shellscripts
============================

* Menu:

* Sending Environment Shellscripts (optdbcli)::
* Showing Environment Shellscripts (optdbcli)::


File: installer.info,  Node: Sending Environment Shellscripts (optdbcli),  Next: Showing Environment Shellscripts (optdbcli),  Up: Environment Shellscripts (optdbcli)

4.7.1 Sending Environment Shellscripts
--------------------------------------

     statement: CLIENT TO SEND ENVIRONMENT SHELLSCRIPT STRING GLOBUS_SITE STRING admin_optional

     admin_optional: /* empty */ | ADMIN

"Environment shellscripts" are used during "remote installation".
*Note Remote Installation::.  They are executed in the shell in which
the installation takes place.  An environment shellscript will therefore
typically contain assignments to variables such as `PATH',
`LD_LIBRARY_PATH', `CFLAGS', `LDFLAGS' etc., in order to ensure that
programs, libraries, header files, and other things needed for
installation are found.

   An environment shellscript is specific to a particular Globus site.
An administrator of a Globus site entry in the database (who may or may
not be the administrator of the Globus site itself) may store one or
more environment shellscripts for that Globus site in the
`Environment_Shellscripts' database table.  *Note
Environment_Shellscripts Database Table::.  (There may be more than one
such administrator for a given Globus site.)  When a user (i.e., any
user) starts a remote installation, passing that Globus site as an
argument, this shellscript or these shellscripts will be fetched from
the database and executed in the shell before the installation is
started.  They are fetched and executed in the order in which they
appear in the database, i.e., according to the value stored in the
`environment_shellscript_id' field for the corresponding row in the
table.  In general, this means that they will be executed in the order
in which they were stored in the database.

   In addition, any user can store one or more environment shellscripts
in the database.  When _this user_ (i.e., not other users) starts a
remote installation, these shellscripts will be fetched from the
database and executed in the shell before the installation is started,
but after the ones supplied by the administrators.  Like these, they
are executed in the order in which they were stored in the database.

   See also *note Environment Shellscript Functions::, and *note
Environment_Shellscripts: Environment_Shellscripts Database Table.


File: installer.info,  Node: Showing Environment Shellscripts (optdbcli),  Prev: Sending Environment Shellscripts (optdbcli),  Up: Environment Shellscripts (optdbcli)

4.7.2 Showing Environment Shellscripts
--------------------------------------

The complete syntax of the `show environment shellscripts' command is as
follows:

     statement: SHOW ENVIRONMENT SHELLSCRIPTS show_environment_shellscript_option_list

     show_environment_shellscript_option_list: /* empty */
                                             | show_environment_shellscript_option_list show_environment_shellscript_option

     show_environment_shellscript_option: USER
                                        | GLOBUS_SITE STRING
                                        | GLOBUS_SITES ALL

   A user can show his or her own environment shellscripts and/or the
"admin" shellscripts for a particular Globus sites or all Globus sites.

   Example:
     show environment shellscripts globus_sites all
     =>
     *** Environment shellscripts ***

     environment_shellscript_id:  1
     user_id:  12
     user_name:  dgon0015
     commonName:  Laurence Finston
     organizationalUnitName:  Gesellschaft fuer wissenschaftliche \
        Datenverarbeitung mbH
     globus_site_id:  1
     hostname:  optinum-srv.gwdg.de
     admin:  1
     disabled:  0
     shellscript:  #### Environment variables for optinum-srv.gwdg.de

     export LIBS="$LIBS -lmysqlclient"
     export LDFLAGS="$LDFLAGS -L/opt/optinum/dbsrvcli/lib"
     export CFLAGS="$CFLAGS -I/opt/optinum/dbsrvcli/include"
     export CXXFLAGS="$CFLAGS -I/opt/optinum/dbsrvcli/include"

   See also *note Environment Shellscript Functions::.


File: installer.info,  Node: Showing Privileges (optdbcli),  Next: Retrieving Information and Installing Locally (optdbcli),  Prev: Environment Shellscripts (optdbcli),  Up: Using the Client Program optdbcli

4.8 Showing Privileges
======================

The complete syntax of the `show privileges' command is as follows:

   statement: SHOW PRIVILEGES USER html_optional          | SHOW
PRIVILEGES ALL html_optional

   html_optional: /* Empty */ | HTML

   Any user can show his or her own privileges, i.e., the row (if any)
for that user in the `Privileges' database table.  *Note Privileges
Database Table::.  If a user has no special privileges, then there will
probably be no data in the table for that user.  However, it is
possible that there would be a row with a value of 0 for each of the
fields corresponding to a privilege.

   Only users with the privilege `superuser' or `show_privileges' can
show data for other users from the `Privileges' table.  If a user
without at least one of these privileges sends the command `show
privileges all' to the server, his or her own privileges will be shown
(if they exist) and a warning will be issued that the user may not view
privileges information about other users:

     show privileges all
     =>
     *** Privileges info for user 1 (lfinsto) ***

     user_id:                   1
     user_name:                 lfinsto
     commonName:                Laurence Finston
     organizationalUnitName:    Gesellschaft fuer wissenschaftliche \
                                Datenverarbeitung mbH
     superuser:                 0
     show_certificates:         0
     show_privileges:           0
     add_globus_site:           0
     delete_globus_site:        0
     enable_globus_site:        0
     edit_globus_site:          0
     add_globus_site_admin:     0
     delete_globus_site_admin:  0
     delegate:                  0


     WARNING!  In `zzparse':  Rule `statement:  SERVER_ZZ SHOW_ZZ \
                                    PRIVILEGES_ZZ FAILED_ZZ INTEGER_ZZ':
     User not permitted to view privileges for other users.
     Continuing.
     WARNING!  In `main':  `warnings_occurred' == 1
     (No errors)
     See error logfile `/tmp/optdbcli_error.log.I5pwAH' \
        and/or logfile `/tmp/optdbcli.log.EoN9ru' for more information.
     Exiting function with return value 4.

   See also *note Functions for Privileges::.


File: installer.info,  Node: Retrieving Information and Installing Locally (optdbcli),  Next: Remote Installation (optdbcli),  Prev: Showing Privileges (optdbcli),  Up: Using the Client Program optdbcli

4.9 Retrieving Information and Installing Locally
=================================================

Let us now assume that the user is working on the "front-end node" of a
grid computer cluster and wishes to fetch information about downloading
and installing the package `GNU hello', version 2.7, which he or she
has previously had stored in the database using the following commands:

     start_entry
     package_name <hello>
     package_version <2.7>
     download_url <ftp://ftp.gwdg.de/pub/gnu/ftp/gnu/hello/hello-2.7.tar.gz>
     installation_script <inst_script_hello.sh>
     end_entry

     optdbcli --fetch --package-name hello --package-version="2.7" \
        optinum-srv.gwdg.de
     =>
     ftp://ftp.gwdg.de/pub/gnu/ftp/gnu/hello/hello-2.7.tar.gz #  \
        # hello # 2.7

   When the option `--fetch' is used, the download command, download
URL and/or installation script for the packages specified with the
`--package-name' and (optionally) `--package-version' options are
"fetched" from the database by the server and sent to the client.  In
this case, no further action is taken.


     optdbcli --install --package-name hello --package-version="2.7" \
        optinum-srv.gwdg.de
     =>
     ftp://ftp.gwdg.de/pub/gnu/ftp/gnu/hello/hello-2.7.tar.gz #  # \
        hello # 2.7
     Directory `/home/lfinsto/Installer/hello_2.7' doesn't exist.
     iter->download_command ==
     iter->download_url == \
     ftp://ftp.gwdg.de/pub/gnu/ftp/gnu/hello/hello-2.7.tar.gz
     ...
     `optdbcli' not creating symbolic links.
     ...
     make install succeeded
     In hello_2.7_install.sh:  Installed hello 2.7 successfully in \
        /home/lfinsto/Installer/hello_2.7
     bin subdirectory exists
     no include subdirectory
     no lib subdirectory

     Execute the following commands in a shell to set its environment \
        (if desired):

     export PATH=$PATH:/home/lfinsto/bin

     In `install_packages':  Installed hello 2.7 successfully in \
        `/home/lfinsto/Installer/hello_2.7'.

   This example differs from the last only in that the `--fetch' option
has been replaced by `install'.  In this case, the client will attempt
to install the packages specified with the `--package-name' and
(optionally) `--package-version' options.  (`--install' implies
`--fetch'.)

   The directories `$HOME/Installer/' and `$HOME/installer_work/' are
created, if they don't already exist.  In addition, the subdirectory
`$HOME/installer_work/hello_2.7/' is created, overwriting any exisiting
subdirectory of this name.

   If the entry for `hello 2.7' in the database contains an
installation script, it is copied into
`$HOME/installer_work/hello_2.7/'.  Otherwise, a default shellscript is
created in this directory.

   If the entry contains a "download command", the latter is executed
with `$HOME/installer_work/hello_2.7/' as the working directory.
Otherwise, if it contains a "download URL", `wget' is used to fetch its
contents, which in most cases will be a compressed `tar' file
containing the distribution of the software package (here, `hello 2.7').

   Next, the installation script is executed, either the one stored in
the database or the default script, if there was none.  Normally, the
script will unpack the compressed `tar' file, enter the top-level
directory of the distribution and perform any actions needed to build
the package.  On Unix-like systems, this will typically consist of
calls to `configure', `make' and `make install'.  However, any given
may require special handling.

   Multiple packages may be specified using `--package-name'.  However,
if `--package-version' is used, it must be used for all packages.  In
addition, the order in which the package versions are specified in the
command must correspond to the order in which the packages are
specified.  For example, in this call:

     optdbcli --package-name hello --package-name m4 \
        --package-version "2.7" --package-version="1.4.15" ...

the version of `hello' to be fetched or installed is 2.7 while the
version of `m4' is 1.4.15.

   Since some packages may not have version numbers or the user might
not know or care about them, the argument to `--package-version' is
optional.  However, if multiple packages are specified and at least one
of them has a "non-empty" `--package-version', instances of
`--package-version' without an argument must be specified as
placeholders for each of the other packages, e.g.,

     optdbcli --package-name hello --package-name m4 \
         --package-name bison --package-version --package-version="1.4.15" \
         --package-version ...

Here, only `m4' has a non-empty package version, but empty instances of
`--package-version' must be used for `hello' and `bison'.

   The previous examples demonstrate the rules, but it's better practice
to keep corresponding instances of `--package-name' and
`--package-version' together, e.g.,

     optdbcli --package-name hello --package-version \
        --package-name m4 --package-version="1.4.15" \
        --package-name bison --package-version
     ...

   *Note Invoking optdbcli/optdbsrv::, for more details about arguments
and options used when invoking the client program `optdbcli'.


File: installer.info,  Node: Remote Installation (optdbcli),  Next: Transferring Proxy Credential (optdbcli),  Prev: Retrieving Information and Installing Locally (optdbcli),  Up: Using the Client Program optdbcli

4.10 Remote Installation
========================

     statement: install_or_reinstall PACKAGE_NAME STRING package_version_optional
                GLOBUS_SITE STRING stdout_filename_optional stderr_filename_optional
                timeout_optional reinstall_prerequisites_optional link_expression_list


     install_or_reinstall: INSTALL
                         | REINSTALL

     package_version_optional: /* empty */
                             | PACKAGE_VERSION STRING


     stdout_filename_optional: /* empty */
                             | STDOUT_FILENAME STRING

     stderr_filename_optional: /* empty */
                             | STDERR_FILENAME STRING

     timeout_optional: /* empty */
                     | TIMEOUT INTEGER

     reinstall_prerequisites_optional: /* empty */
                                     | REINSTALL PREREQUISITES
                                     | NO REINSTALL PREREQUISITES

     link_expression_list: /* empty */
                         | link_expression_list link_expression

     link_expression: NO_LINKS
                    | WITH_LINKS
                    | LINK_DIRECTORY STRING

See also *note Remote Installation::, and *note Transferring Proxy
Credential (optdbcli)::.


File: installer.info,  Node: Transferring Proxy Credential (optdbcli),  Next: Globus Sites (optdbcli),  Prev: Remote Installation (optdbcli),  Up: Using the Client Program optdbcli

4.11 Transferring Proxy Credential
==================================

Remote installation (see *note Remote Installation::, and *note Remote
Installation (optdbcli)::, above) requires that a "proxy credential" be
available on the computer where `optdbsrv' is running.  The following
command is used to transfer the proxy credential:

     statement: CLIENT TO TRANSFER PROXY_CREDENTIAL STRING

   Example:
     CLIENT TO TRANSFER PROXY_CREDENTIAL <x509up_u1000>

   The proxy credential (`x509up_u1000' in this example) must already
exist on the computer where the client is running.  The shellscript
`gen_proxy.sh', which is included in the distribution, can be used to
generate a proxy credential.  *Note Client/Server (optdbcli/optdbsrv)
Shellscripts::.  It, in turn, uses the program `grid-proxy-init', which
is part of the Globus Toolkit distribution and should be located in
`$GLOBUS_LOCATION/bin/', e.g.,
`/usr/local/globus-4.0.8/bin/grid-proxy-init'.

   `optdbsrv' processes this command immediately, so that a proxy
credential can be transferred and one or more remote installation
commands can be executed with a single invocation of the client.
Please note that a proxy credential only needs to be transferred if
there is no valid proxy available on the computer where `optdbsrv' is
running;  it is not necessary to transfer proxy credentials for each
remote installation or each invocation of `optdbcli'.

   The proxy credential is stored in the `/tmp/' directory on the
computer where the server is running.  The owner is the user on that
system corresponding to the entry in the `grid-mapfile' for the
Distinguished Name of the certificate or proxy credential passed as an
argument to `optdbcli' _or_ the Distinguished Name in a `SET
EFFECTIVE_USER' command.  *Note Setting Effective User (optdbcli)::.
Please note that the latter case is only possible for users who are
authorized to act as a "delegate" for one or more other users.  *Note
Setting Effective User (optdbcli)::, and *note Delegates Database
Table::.


File: installer.info,  Node: Globus Sites (optdbcli),  Next: Globus Site Administrators (optdbcli),  Prev: Transferring Proxy Credential (optdbcli),  Up: Using the Client Program optdbcli

4.12 Globus Sites
=================

The commands for adding, deleting, etc., Globus site information are
only available to users with the appropriate privileges
(`add_globus_site', `delete globus_site', etc.).  *Note Privileges:
Privileges Database Table.

* Menu:

* Adding Globus Sites (optdbcli)::
* Enabling and Disabling Globus Sites (optdbcli)::
* Deleting and Undeleting Globus Sites (optdbcli)::


File: installer.info,  Node: Adding Globus Sites (optdbcli),  Next: Enabling and Disabling Globus Sites (optdbcli),  Up: Globus Sites (optdbcli)

4.12.1 Adding Globus Sites
--------------------------

     statement: ADD GLOBUS_SITE STRING globus_site_option_list

     globus_site_option_list: /* empty */
                            | globus_site_option_list globus_site_option

     globus_site_option: INTERACTIVE_NODE STRING
                       | APPEND_LD_LIBRARY_PATH STRING
                       | APPEND_PATH STRING
                       | OPTDBCLI_PATH STRING
                       | IP_ADDRESS STRING
                       | INTERACTIVE_NODE_IP_ADDRESS STRING
                       | ENABLED
                       | DISABLED
                       | REPLACE


File: installer.info,  Node: Enabling and Disabling Globus Sites (optdbcli),  Next: Deleting and Undeleting Globus Sites (optdbcli),  Prev: Adding Globus Sites (optdbcli),  Up: Globus Sites (optdbcli)

4.12.2 Enabling and Disabling Globus Sites
------------------------------------------


     statement: ENABLE GLOBUS_SITE STRING
              | DISABLE GLOBUS_SITE STRING


File: installer.info,  Node: Deleting and Undeleting Globus Sites (optdbcli),  Prev: Enabling and Disabling Globus Sites (optdbcli),  Up: Globus Sites (optdbcli)

4.12.3 Deleting and Undeleting Globus Sites
-------------------------------------------




     statement: | MARK AS DELETED GLOBUS_SITE STRING
                | UNDELETE GLOBUS_SITE STRING enable_optional
                | DELETE GLOBUS_SITE STRING FINALLY

     enable_optional: /* empty */
                    | ENABLE
                    | DISABLE


File: installer.info,  Node: Globus Site Administrators (optdbcli),  Prev: Globus Sites (optdbcli),  Up: Using the Client Program optdbcli

4.13 Globus Site Administrators (optdbcli)
==========================================

     statement: add_or_delete ADMIN GLOBUS_SITE STRING USER INTEGER
              | EDIT GLOBUS_SITE STRING SET globus_site_option_list
              | EDIT GLOBUS_SITE STRING UNSET globus_site_option_list_1

     add_or_delete: ADD
                  | DELETE


     globus_site_option_list_1: /* empty */
                              | globus_site_option_list_1 globus_site_option_1

     globus_site_option_1: INTERACTIVE_NODE
                         | APPEND_LD_LIBRARY_PATH
                         | APPEND_PATH
                         | OPTDBCLI_PATH
                         | IP_ADDRESS
                         | INTERACTIVE_NODE_IP_ADDRESS


File: installer.info,  Node: Global Variables and Constants optdbcli/optdbsrv,  Next: Global Functions optdbcli/optdbsrv,  Prev: Using the Client Program optdbcli,  Up: Top

5 Global Variables and Constants optdbcli/optdbsrv
**************************************************

* Menu:

* Global Constants optdbcli/optdbsrv::
* Global Variables optdbcli/optdbsrv::


File: installer.info,  Node: Global Constants optdbcli/optdbsrv,  Next: Global Variables optdbcli/optdbsrv,  Up: Global Variables and Constants optdbcli/optdbsrv

5.1 Global Constants optdbcli/optdbsrv
======================================

 -- Global Constant: string DEFAULT_PORT_STR_AUTH = "5556"
     The port to which users will be connecting per default with
     authentication as a `string'.

 -- Global Constant: int DEFAULT_PORT_NUM_AUTH = 5556
     The port to which users will be connecting  per default with
     authentication as an integer.

 -- Global Constant: string DEFAULT_PORT_STR_NON_AUTH = "5557"
     The port to which users will be connecting per default without
     authentication as a `string'.

 -- Global Constant: int DEFAULT_PORT_NUM_NON_AUTH = 5557
     The port to which users will be connecting  per default without
     authentication as an integer.

 -- Global Constants: int MAX_PROTOCOL = 4
 -- : int NULL_PROTOCOL = 0
 -- : int FTP_PROTOCOL = 1
 -- : int HTTP_PROTOCOL = 2
 -- : int HTTPS_PROTOCOL = 3
     `MAX_PROTOCOL' must be changed whenever protocols are added.

 -- : string DEFAULT_CA_FILENAME
     The default value is conditionally compiled, depending on the
     platform.  It is only non-empty for a selection of machines known
     to the author.  If non-empty, the filename is always
     `DFN-VereinPCAGrid-G01.pem', but the path differs.

 -- : string DEFAULT_CRL_FILENAME = ""

 -- Global Constant: int MAX_FILENAME = 128

 -- Global Constant: int MAX_USER_ID = 128

 -- Global Constant: unsigned int SHOW_USER_ENTRIES   = 1

 -- Global Constant: unsigned int SHOW_PUBLIC_ENTRIES = 2

 -- Global Constant: string DEFAULT_LOG_FILENAME = "/tmp/optdbcli.log"

 -- Global Constant: string DEFAULT_ERR_LOG_FILENAME =
"/tmp/optdbcli_error.log"


File: installer.info,  Node: Global Variables optdbcli/optdbsrv,  Prev: Global Constants optdbcli/optdbsrv,  Up: Global Variables and Constants optdbcli/optdbsrv

5.2 Global Variables optdbcli/optdbsrv
======================================

 -- Global Variable: unsigned int thread_ctr
     Initialized to 0.

 -- Global Variables: pthread_mutex_t thread_ctr_mutex
 -- : pthread_mutex_t cerr_mutex
 -- : pthread_mutex_t global_variable_mutex
 -- : pthread_mutex_t session_data_mutex
 -- : pthread_mutex_t log_strm_mutex
 -- : pthread_mutex_t err_log_strm_mutex
     Mutexes.

 -- Global Variables: ofstream output_file_strm
 -- : ofstream log_strm
 -- : ofstream err_log_strm
     Output file streams.

 -- Global Variables: string server_ip_address
     The IP address of the server.  Used by the client.

 -- Global Variables: string port_str_auth
 -- : string port_str_non_auth
 -- : int port_num_auth
 -- : int port_num_non_auth
     Ports.  Initialized to `""' or `0', as appropriate.

 -- Global Variables: string input_filename
 -- : string output_filename
     Filenames.

 -- Global Variable: bool save_temp_files = false

 -- Global Variable: string owner_certificate = ""

 -- Global Variable: int sleep_value = 0
     For debugging.

 -- Global Variable: map<string, string> dn_fields

 -- Global Variable: map<string, string> dn_username_map

 -- Global Variables: bool is_client
 -- : bool is_server

 -- Global Variables: string distinguished_name_str
 -- : Distinguished_Name_Type distinguished_name
 -- : vector<Distinguished_Name_Type> distinguished_name_vector

 -- Global Variable: string grid_mapfile_filename
     Initialized to a value depending on conditionally compiled code.

 -- Global Variables: vector<string> package_names
 -- : vector<string> package_versions

 -- Global Variable: bool resolve_dependencies = true

 -- Global Variable: bool install = false

 -- Global Variable: bool fetch = false

 -- Global Variable: bool authenticated_connection = false

 -- Global Variable: int errors_occurred = 0

 -- Global Variable: int warnings_occurred = 0

 -- Global Variables: string DEFAULT_CERT_FILENAME
 -- : string DEFAULT_KEY_FILENAME

 -- Global Variables: string log_filename
 -- : string err_log_filename

 -- Global Variables: bool download_fail_continue
 -- : bool install_fail_continue

 -- Global variable: string link_directory

 -- Global variable: int create_links_value = 0

 -- Global variable: string globus_site
     Set by means of the `--globus-site' option.

 -- Global variable: map<string, bool> globus_site_map

 -- Global variable: string optinum_installer_gpg_pubkey_fingerprint

 -- Global variable: string gpg_homedir

 -- Global variable: int trace_value = 0

 -- Global variable: bool scanner_trace = false

 -- Global variable: bool reinstall_flag = false

 -- Global variable: string install_directory

 -- Global variable: int prerequisites_reinstall_value = 0

 -- Global variable: vector<string> temp_file_vector

 -- Global variable: vector<string> fifo_vector

 -- Global variable: string proxy_cred_filename

 -- Global variable: bool transfer_proxy_cred = false

 -- Global variable: string transfer_proxy_cred_filename

 -- Global variable: bool proxy_cred_verified = false

 -- Global variables: vector<string> cert_filenames
 -- : vector<string> key_filenames

 -- Global variables: vector<string> ca_filenames
     For server only, unless the client needs to verify a proxy
     credential.  In this case, only the first one is used.

 -- Global variables: vector<string> crl_filenames
     For server only.

 -- Global variable: string session_id
     For client only.


File: installer.info,  Node: Global Functions optdbcli/optdbsrv,  Next: Server Connection Function Reference,  Prev: Global Variables and Constants optdbcli/optdbsrv,  Up: Top

6 Global Functions optdbcli/optdbsrv
************************************

These functions are defined in `glblfncs.web'.  They don't require many
declarations of data types, functions and/or variables declared in the
OptiNum Installer package, so the corresponding header file can be
included in files where other header files from the package are not
included, or before these header files are included.

 -- Function: int set_cert_files (string &CURR_KEY_FILENAME, string
          &CURR_CERT_FILENAME, string &CURR_CA_FILENAME, string
          &CURR_CRL_FILENAME)

 -- Function: int init_maps (void)

 -- Function: void lock_cerr_mutex (void)
 -- Function: void unlock_cerr_mutex (void)

 -- Function: string get_datestamp (void)


File: installer.info,  Node: Server Connection Function Reference,  Next: Client Connection Function Reference,  Prev: Global Functions optdbcli/optdbsrv,  Up: Top

7 Server Connection Function Reference
**************************************

 -- Function: int main (int argc, char** argv)
     Main function for server.  Defined in `optdbsrv.web'.

     Sets values of global variables.  Some of these are set to other
     values in `optdbcli', so they can't be initialized where they are
     declared in `glblvrbl.web'.

     Processes command-line options.

     Performs initializations, i.e., of the mutexes that are used.  In
     addition, some of the libraries with which `optdbsrv' is linked
     require initialization, i.e., the MySQL, libgcrypt and GNUTLS
     libraries.

     It then starts a thread with the function `listen_auth' and
     another with the function `listen_non_auth'.  These functions
     continue to execute until the server is stopped.  In normal use,
     the server is meant to run in the background "forever".  In
     practice, it will be stopped when developing or debugging the
     program, whenever the machine on which it is running is rebooted,
     or for any number of other reasons.

     While it doesn't do any harm to just end the program by sending it
     a signal to "kill" it, which is what one normally does, the `main'
     function contains code to "join with" the two threads, after which
     it destroys the mutexes and calls `mysql_library_end' and
     `gnutls_global_deinit'.  (In addition, it closes an output file,
     which as of 2010.07.23 is, however, not open.)  This ensures that
     program ends cleanly if the threads exit for some reason, whereby
     both threads must exit;  if only one exits, `main' will block
     forever, waiting for the other one to exit.


   The following functions are defined in `connect.web'.

 -- Function: void* connect_func (void* v)
     For "authorized" connections using X.509 certification.


 -- Function: void* connect_func_non_auth (void* v)

* Menu:

* Exchange Data With Client::


File: installer.info,  Node: Exchange Data With Client,  Up: Server Connection Function Reference

7.1 Exchange Data With Client
=============================

 -- Function: int exchange_data_with_client (Scan_Parse_Parameter_Type
          * PARAM)
     `exchange_data_with_client' is one of the most important functions
     in the server program `optdbsrv'.  It controls the communication
     with the client program `optdbcli'.  See also *note Exchange Data
     With Server::.


File: installer.info,  Node: Client Connection Function Reference,  Next: Web Application,  Prev: Server Connection Function Reference,  Up: Top

8 Client Connection Function Reference
**************************************

 -- Function: int main (int argc, char** argv)
     Defined in `optdbcli.web'.

 -- Function: void finish (void)
     Exit handler.  Passed as argument to `atexit'.

   The following functions are defined in `cnnctcli.web'.

   These functions are defined in `cnnctcli.web'.

 -- Function: int client_connect_auth (void)
     Connects with the server using authorization/authentication by
     means of X.509 certificates.

 -- Function: int client_connect_non_auth (void)
     Connects with the server using authorization/authentication by
     means of a "proxy credential" passed to the client as the argument
     to the command line option `--proxy-certificate'.

* Menu:

* Exchange Data With Server::


File: installer.info,  Node: Exchange Data With Server,  Up: Client Connection Function Reference

8.1 Exchange Data With Server
=============================

 -- Function: int exchange_data_with_server (Scan_Parse_Parameter_Type
          & PARAM)
     `exchange_data_with_server' is one of the most important functions
     in the client program `optdbcli'.  It controls the communication
     with the server program `optdbsrv'.  See also *note Exchange Data
     With Client::.


File: installer.info,  Node: Web Application,  Next: Software Installation,  Prev: Client Connection Function Reference,  Up: Top

9 Web Application
*****************

The web application `optwbsrv.fcgi' makes it possible for users without
access to the client application `optdbcli' to create entries in the
package database.  It may not be possible or desirable to install
`optdbcli' on a particular computer for some reason or other.  In
particular, it may not be possible to install it on a system running
under one of the Windows operating systems.

   The web application `optwbsrv.fcgi' is a "FastCGI" program that is
executed under the control of a "webserver", such as Apache httpd.
(CGI stands for "Common Gateway Interface".)  Normally, users will not
want to install it themselves, but will use `curl' or a similar package
to send commands to an instance of `optwbsrv.fcgi' installed at a
remote location.

   However, it is, of course, possible to install `optwbsrv.fcgi'
locally.  It must be installed in (i.e., copied to) a directory, where
the webserver looks for such programs or "scripts".  A typical location
would be `/srv/www/fcgi-bin/'.  The owner of `optwbsrv.fcgi' must
either be root or a user with appropriate permissions.  For example, a
user created especially for the purpose of executing CGI and/or FastCGI
scripts.

   The C++  source code for the web application `optwbsrv' is contained
in a single file, namely `[...]/optwbsrv/optwbsrv.web'.

* Menu:

* Accessing the Web Application::
* Auxiliary_File_Type::
* Global Variables and Constants Web Application::
* Web Application Functions::
* Scanner Web Application::
* Parser Web Application::


File: installer.info,  Node: Accessing the Web Application,  Next: Auxiliary_File_Type,  Up: Web Application

9.1 Accessing the Web Application
=================================

The web application can be accessed as follows:

     curl --data-urlencode input@<data file> \
          --data-urlencode \
        installation_scripts@<installation script data file> \
          --cacert ca-bundle.crt \
          --cert usercert.pem --key userkey.pem \
        https://some-machine.somewhere.de/fcgi-bin/optwbsrv.fcgi

   `curl' is a command-line program that sends data to a webserver.
Here, the latter is installed on the computer
`some-machine.somewhere.de'.   The webserver resolves the path
`/fcgi-bin/' appended to the name of the server to some directory on
its system.  This is determined by the configuration of the webserver.
The server calls the web application `optwbsrv.fcgi' to process the
"request", passing to it any data it contains.

   The arguments:

     `input@<data file>' `curl' sends the contents of the `<data file>'
     to the server.

     `installation_scripts@<installation script data file>' `curl'
     sends the contents of the `<installation script data file>' to the
     server.

     `--data-urlencode' Ensures that special characters in
     `test_data.txt' are "URL encoded".

     `--cacert ca-bundle.crt' A "CA certificate bundle", i.e., a file
     containing one or more "CA" (Certification Authority) certificates

     `--cert usercert.pem'

     `--key userkey.pem'

     `https://some-machine.somewhere.de/fcgi-bin/optwbsrv.fcgi'


* Menu:

* Data Files Web Application::


File: installer.info,  Node: Data Files Web Application,  Up: Accessing the Web Application

9.1.1 Data Files
----------------

When creating entries using `optwbsrv' via `curl' or in some other way,
the command `INSTALLATION_SCRIPT <filename>' cannot be used.  The
reason for this is that the contents of `<data file>' are passed by
`optdbcli' (the client) directly to `optdbsrv' (the server); they are
processed neither by `optdbcli' nor by `optwbsrv'.  The filename must
refer to a file on the computer where `optdbcli' is running, which in
this case is the one where `optwbsrv' is running, since the latter
calls `optdbcli'.

   In order to solve this problem, commands must be sent separately to
the web application which it _will_ process, the contents of the files
containing the installation scripts must be transferred to the computer
where `optwbsrv' is running, and they must be associated with the
correct entries.

   The file `<installation script data file>' contains commands and the
contents of the installation scripts in a special format, e.g.,

     START_INSTALLATION_SCRIPT_OPTW
     PACKAGE_NAME_OPTW <m4>
     START_TEXT_OPTW
     echo "m4 installation script"
     ...
     exit 0;
     END_TEXT_OPTW
     END_INSTALLATION_SCRIPT_OPTW

     START_INSTALLATION_SCRIPT_OPTW
     PACKAGE_NAME_OPTW <bison>
     START_TEXT_OPTW
     echo "bison installation script"
     ...
     exit 0;
     END_TEXT_OPTW
     END_INSTALLATION_SCRIPT_OPTW

   It is not possible to determine beforehand what a shellscript might
contain, so the syntax used for these files is deliberately verbose in
order to reduce the chances that something might appear in a
shellscript that `optwbsrv' would interpret as a command.  For example,
the command names all use the suffix `_OPTW', since it is unlikely that
that a variable name used in a shellscript would also have this suffix.
However, this is not, of course, complete protection.(1)

   When `optwbsrv' processes this file, it stores the shellscript code
between each instance `START_TEXT_OPTW' and `END_TEXT_OPTW' in its own
temporary file and appends a corresponding `ADD INSTALLATION_SCRIPT'
command with this filename to the code passed to `optdbcli' and from it
to `optdbsrv'.  That is, if new entries are to be created, the commands
`START_ENTRY ... END_ENTRY' will be in `<data file>' and
`START_INSTALLATION_SCRIPT_OPTW ... END_INSTALLATION_SCRIPT_OPTW' in
`<installation script data file>'.

   ---------- Footnotes ----------

   (1) A more reliable method would be to count the bytes in the
shellscript file and send exactly this many bytes to `optdbsrv'.
However, the author does not believe that this extra degree of safety
is needed at this time.


File: installer.info,  Node: Auxiliary_File_Type,  Next: Global Variables and Constants Web Application,  Prev: Accessing the Web Application,  Up: Web Application

9.2 Auxiliary_File_Type
=======================

`struct Auxiliary_File_Type' is declared in `instsctp.web'.


File: installer.info,  Node: Global Variables and Constants Web Application,  Next: Web Application Functions,  Prev: Auxiliary_File_Type,  Up: Web Application

9.3 Global Variables and Constants
==================================

 -- Global Variable: extern char ** environ

 -- Global Constant: const int IN_BUFFER_SIZE = 1048576


File: installer.info,  Node: Web Application Functions,  Next: Scanner Web Application,  Prev: Global Variables and Constants Web Application,  Up: Web Application

9.4 Web Application Functions
=============================

 -- Function: int main (int argc, char** argv)
     The `main' function for the web application.

 -- Function: int init (void)
     Initialization function.  Currently this function simply returns 0.

 -- Function: int parse_args (string& BUFFER, vector<pair<string,
          string> >& PARAMETERS)


File: installer.info,  Node: Scanner Web Application,  Next: Parser Web Application,  Prev: Web Application Functions,  Up: Web Application

9.5 Scanner
===========

The Flex input code for generating the scanner is in `scnwbsrv.web'.

   Apart from the `INITIAL' start condition, which is automatically
defined, the scanner code defines the exclusive start condition
`SAVING', which is used when reading the text of the installation
script.

   Since shellscripts may contain many different characters and
sequences of characters, and it would not be possible for the programs
in the Optinum-Grid package (or their authors) to enforce restrictions
beyond the ones set by the shells themselves, the scanner must be able
to handle anything that might reasonably appear in a shellscript.  In
particular, it should not misinterpet text in a shellscript for
commands meant for the scanner itself.

   It is, of course, not possible to protect against this entirely:  If
a shellscript contains the string `END_TEXT_OPTW', this will cause the
scanner to "think" that it's finished reading the text of the
shellscript and leave the `SAVING' start condition.  It will then
expect commands, which will probably not be forthcoming, which will, in
turn, cause an error to occur.

   The name `END_TEXT_OPTW' and the names of the other commands were
deliberately chosen so that it would be unlikely that anyone would use
them in a shellscript, unless it was with the intention of causing an
error.

* Menu:

* Scanner Web Application Variables::
* Scanner Web Application Functions::


File: installer.info,  Node: Scanner Web Application Variables,  Prev: Scanner Web Application Functions,  Up: Scanner Web Application

9.5.1 Variables
---------------

 -- Variable: bool DEBUG_SCANNER


File: installer.info,  Node: Scanner Web Application Functions,  Next: Scanner Web Application Variables,  Up: Scanner Web Application

9.5.2 Functions
---------------

 -- Function: int yylex (YYSTYPE* lvalp, yyscan_t parameter)


File: installer.info,  Node: Parser Web Application,  Prev: Scanner Web Application,  Up: Web Application

9.6 Parser
==========

The GNU Bison input code for generating the parser is in `prswbsrv.web'.

* Menu:

* Parser Web Application Functions::


File: installer.info,  Node: Parser Web Application Functions,  Up: Parser Web Application

9.6.1 Functions
---------------

 -- Function: int yyparse (yyscan_t parameter)

 -- Function: int yywrap (void)

 -- Function: int yyerror (void* v, char const* s)


File: installer.info,  Node: Software Installation,  Next: TLS Connections,  Prev: Web Application,  Up: Top

10 Software Installation
************************

 -- Function: int install_packages (Scan_Parse_Parameter_Type &PARAM)
     Defined in `instllfn.web'.

     This function is called when `optdbcli' is called using the
     `--install' option and at least one package name is specified
     using the `--package-name' option.  Versions may also be specified
     using the `--package-version' option, whereby the number of
     instances of `--package-version' must either be zero or it must
     match the number of instances of `--package-name'.  Otherwise,
     `optdbcli' would not be able to associate the versions to the
     package names.  `--package-version' may be used without an
     argument as a placeholder for packages where the version is
     unknown or the user doesn't wish to specify one for some reason.
     See *Note Invoking optdbcli/optdbsrv::, for more information.

     Before this function is called, the server program `optdbsrv' will
     have retrieved information from the database for each of the
     packages specified.  _Unless_ `optdbcli' has been invoked using the
     `--no-resolve-dependencies' option, `optdbsrv' will also have
     retrieved information from the database for all of the packages
     upon which the packages specified with `--package-name' depend,
     i.e., their "prerequisites".  `optdbcli' may also be invoked using
     the option `--resolve-dependencies', but resolving dependencies is
     the default behavior.  (`--resolve-dependencies' may be used to
     cancel the effect of `--no-resolve-dependencies', if the latter
     appears first on the command-line in an invocation of `optdbcli'.)
     See *Note Invoking optdbcli/optdbsrv::.

     If information for multiple packages is retrieved, and some
     packages are prerequisites of others, then the information will be
     sorted in order to ensure that packages are 1.~installed in the
     correct order and 2.~only installed once.

     The information retrieved from the server consists of:

       1. A number used for sorting, as described above.

       2. A download URL, if present.

       3. A download command, if present.

       4. An installation script.  If none is specified, a default
          script is created.  (This occurs in the parser rule
          `statement: NO_ZZ INSTALLATION_SCRIPT_ZZ FOR_ZZ ENTRY_ZZ
          entry_string_list ORDER_ZZ INTEGER_ZZ', which is defined in
          the file `prsrclnt.web', *note Parser Client::.)

       5. The package name.

       6. The package version, if present.  Please note that a package
          version may have been retrieved from the database even if
          `optdbcli' was invoked without an instance of the
          `--package-version' option for this package!

     The directories `$HOME/bin', `$HOME/lib', `$HOME/include',
     `$HOME/installer_work' and `$HOME/Installer' are created, if they
     don't already exist.  In addition, a subdirectory for each package
     is created in `$HOME/Installer/', where the names of these
     subdirectories consist either of the package name alone (if no
     package version was specified using the `--package-version'
     option) (e.g., "`$HOME/Installer/ngspice'") or of the package name
     and the package version, separated by an underscore character
     (e.g., "`$HOME/Installer/m4_1.4.14'").

     A "download command", if present, takes precedence over "download
     URL".  A download command is simply one or more shell commands,
     which are executed using `system'.  If there is no download
     command, but a download URL is present, `wget' is used to download
     the contents of the URL, which should contain the distribution of
     the package in question.

     The package is downloaded into the directory
     `$HOME/installer_work/'.  Then, the "installation script", either
     one supplied by the user or the default installation script, is
     executed using `system'.  The package is installed in the
     corresponding subdirectory of `$HOME/Installer/', whose name is
     derived as described above.

     Following installation, if the directories
     `$HOME/Installer/<package>/bin/',
     `$HOME/Installer/<package>/lib/', and/or
     `$HOME/Installer/<package>/include/' exist, "symbolic links" are
     created in `$HOME/bin/', `$HOME/lib/', and/or `$HOME/include/',
     that point to any files in these directories.

 -- Function: int create_links (string SOURCE_DIR)
     This function is currently only called for packages that are
     installed based on encrypted database entries ("secure
     installation").  If the installed package contains directories
     named `bin', `include' and/or `lib', links are created in
     `\$HOME/bin', `\$HOME/include' and/or `\$HOME/lib', respectively.
     Please note: These directories in the installed package can be at
     any level!  For example, links to files in a directory
     `hello-2.7/gnulib/lib' will also be made in `\$HOME/lib'; not
     `\$HOME/gnulib/lib'.

     It would be possible to create the directory `\$HOME/gnulib/lib',
     but within `optdbcli', it is not known what directories will be
     created when the package is installed.  That is, the directory into
     which `scrinstl' copies files is known.  This is the |source_dir|
     argument to |create_links|.  However, `optdbcli' has now further
     information about the directory structure below this directory,
     which will differ from package to package.  \par This function
     therefore accounts for the most common cases in a simple way.  If
     special handling is required, the installation script must account
     for it.  However, the latter runs under the user id of the owner
     of the package ("company"), so it will probably be necessary to
     have it pass information back to `scrinstl' and possibly have
     `scrinstl' pass it back to `optdbcli', in order to have one of
     these programs create the links under the user id of the user
     ("customer").

* Menu:

* Normal Software Installation::
* Hidden Software Installation::
* Local Software Installation::
* Remote Software Installation::


File: installer.info,  Node: Normal Software Installation,  Next: Hidden Software Installation,  Up: Software Installation

10.1 Normal Software Installation
=================================


File: installer.info,  Node: Hidden Software Installation,  Next: Local Software Installation,  Prev: Normal Software Installation,  Up: Software Installation

10.2 Hidden Software Installation
=================================

For many software packages, the source code is freely available and
there is no need for secrecy regarding the source code itself, the
location (URL) where the package is available for downloading or the
installation procedure.  In such cases, a user can store the URL and
optionally an installation script in a database entry, as described
above.  An entry can be marked as `private', so that other users of the
OptiNum-Grid Installer system will not be able to view the database
entry, but all of the information is, of course, available to the user
who created it.

   However, there are situations where this model doesn't apply,
particularly where the software package itself or its use is sold
commercially.  For such cases, the OptiNum-Grid Installer provides a
means of performing a "hidden software installation".

   The software database entry for a package that uses this facility
differs from an ordinary database entry in that certain fields contain
encrypted information that can only be decrypted by the owner of the
package ("software provider").  The software provider provides its
customers with encrypted files and the latter create database entries
using them.  When the package should be installed on a grid resource,
the encrypted files are decrypted, the software is downloaded and the
installation procedure is carried out _all under the user account of
the software provider_.  Upon successful installation, whatever the
software provider intends to make available to the customer, e.g.,
executable, library, header and/or other files, are copied to the
latter's account.  In this way, it is ensured that the customer receive
only as much material or information as the software provider wishes to
provide.

 -- Function: int hidden_install (Scan_Parse_Parameter_Type &PARAM,
          vector<string> &ARG_VECTOR)


File: installer.info,  Node: Local Software Installation,  Next: Remote Software Installation,  Prev: Hidden Software Installation,  Up: Software Installation

10.3 Local Software Installation
================================

The OptiNum-Grid Installer is intended for installation software
packages on grid resources.  Therefore, from the user's point of view,
the normal case is the "Remote Software Installation" (see below).
However, it is also possible to use it for installing packages directly
on the user's computer.  This is especially useful for testing, but may
be for other purposes, as well.

   To install a package locally, invoke `optdbcli' using the options
`--install' or `--reinstall' together with the option `--package-name'
and optionally `--package-version', as described in *note Software
Installation Options::.

     optdbcli --install --package-name="hello" --package-version="2.7"


File: installer.info,  Node: Remote Software Installation,  Prev: Local Software Installation,  Up: Software Installation

10.4 Remote Software Installation
=================================

A "remote software installation" is performed on a grid resource.  It
is initiated by means of the command

     [install | reinstall]  package_name STRING [package_version STRING]
     globus_site STRING [options]

in the input sent by `optdbcli' to `optdbsrv'.

   For example,

     reinstall package_name <hello> <2.7> globus_site <optinum-srv.gwdg.de>

causes `hello 2.7' to be installed on `optinum-srv.gwdg.de'.  If it has
already been installed by the users, it will be reinstalled.

   Please note that no distinction is made between a normal and a hidden
installation at this point.  When `optdbsrv' retrieves the data for the
software package from the database, it is determined whether the entry
contains encrypted data or not.  If it does, a hidden installation is
performed.  Otherwise, a normal installation is performed.


File: installer.info,  Node: TLS Connections,  Next: X509_Cert_Type Reference,  Prev: Software Installation,  Up: Top

11 TLS Connections
******************

TLS Connections:  Communication using TLS.

* Menu:

* Preprocessor Macros for TLS::
* Types for TLS::
* TLS Variables::
* TLS Functions::


File: installer.info,  Node: Preprocessor Macros for TLS,  Next: Types for TLS,  Up: TLS Connections

11.1 Preprocessor Macros for TLS
================================

 -- Preprocessor Macros: TLS_SESSION_CACHE = 50
 -- : MAX_SESSION_ID_SIZE = 32
 -- : MAX_SESSION_DATA_SIZE = 512
 -- : DH_BITS = 1024
 -- : SA = struct sockaddr
 -- : SOCKET_ERR (err,s) if(err==-1) perror(s);pthread_exit(0);


File: installer.info,  Node: Types for TLS,  Next: TLS Variables,  Prev: Preprocessor Macros for TLS,  Up: TLS Connections

11.2 Types for TLS
==================

`CACHE' is `struct' declared by means of a `typedef' in `gntlsfnc.web'.

 -- Data members: char session_id[MAX_SESSION_ID_SIZE]
 -- : char session_id[MAX_SESSION_ID_SIZE]
 -- : int session_id_size
 -- : char session_data[MAX_SESSION_DATA_SIZE]
 -- : int session_data_size
     Declared in `gntlsfnc.web'.


File: installer.info,  Node: TLS Variables,  Next: TLS Functions,  Prev: Types for TLS,  Up: TLS Connections

11.3 Variables for TLS
======================

 -- Variable: gnutls_x509_crl_t * crl_list
     Global within `ex_verify.web'.  All the available CRLs
     (Certificate Revocation Lists).

 -- Variable: int crl_list_size
     Global within `ex_verify.web'.

 -- Variable: static char srp_dh_group2048[]
     Global within `gntlsfnc.web'.


 -- Variable: static CACHE * cache_db
     Global within `gntlsfnc.web'.

 -- Variable: static int cache_db_ptr
     Global within `gntlsfnc.web'.

 -- File-local constant: const string mysql_password_encrypted
     If used, `mysql_password_encrypted' should be a password for the
     MySQL database engine, encrypted using GPG and ASCII-encoded.  It
     is used in `listen_auth' (*note TLS Functions::, below) for
     connecting with the MySQL database on platforms where a password is
     required.  This should be the case for "production" installations
     of `optdbsrv', but may not be for local installations used for
     testing.


File: installer.info,  Node: TLS Functions,  Prev: TLS Variables,  Up: TLS Connections

11.4 TLS Functions
==================

 -- Function: int verify_certificate (gnutls_session_t SESSION, const
          char *HOSTNAME = 0)
     Defined in `ex_rfc2818.web'.

 -- Function: int verify_certificate_chain (gnutls_session_t session,
          const char *hostname,
          const gnutls_datum_t *cert_chain,
          int cert_chain_length,
          gnutls_x509_crt_t *ca_list,
          int ca_list_size,
          X509_Cert_Type* user_cert = 0,
          X509_Cert_Type* issuer_cert = 0,
          Scan_Parse_Parameter_Type* param = 0)
     Defined in `ex_verify.web'.

 -- Static Function: void verify_cert2 (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t ISSUER,
          gnutls_x509_crl_t * CRL_LIST,
          int CRL_LIST_SIZE,
          Scan_Parse_Parameter_Type * PARAM = 0)
     Defined in `ex_verify.web'.  Verifies a certificate against an
     other certificate which is supposed to be it's issuer. Also checks
     the CRL_LIST, if any, for whether the certificate has been revoked.

 -- Function: void verify_last_cert (gnutls_x509_crt_t crt,
          gnutls_x509_crt_t * ca_list,
          int ca_list_size,
          gnutls_x509_crl_t *crl_list,
          int crl_list_size,
          Scan_Parse_Parameter_Type* param = 0)
     Defined in `ex_verify.web'.

 -- Function: gnutls_session_t initialize_tls_session
          (gnutls_certificate_credentials_t& CERT_CRED)
     Defined in `gntlsfnc.web'.

 -- Function: int generate_dh_params (gnutls_dh_params_t& DH_PARAMS);
     Defined in `gntlsfnc.web'.

 -- Function: int generate_dh_params_non_auth (gnutls_dh_params_t&
          DH_PARAMS)
     Defined in `gntlsfnc.web'.

 -- Function: gnutls_session_t initialize_tls_session_non_auth
          (gnutls_anon_server_credentials_t& ANONCRED)
     Defined in `gntlsfnc.web'.

 -- Function: int generate_rsa_params (gnutls_rsa_params_t& RSA_PARAMS)
     Defined in `gntlsfnc.web'.

 -- Function: void wrap_db_init (void)
     Defined in `gntlsfnc.web'.

 -- Function: void wrap_db_deinit (void)
     Defined in `gntlsfnc.web'.

 -- Function: int wrap_db_store (void *DBF, gnutls_datum_t KEY,
          gnutls_datum_t DATA)
     Defined in `gntlsfnc.web'.

 -- Function: gnutls_datum_t wrap_db_fetch (void *DBF, gnutls_datum_t
          KEY)
     Defined in `gntlsfnc.web'.

 -- Function: int wrap_db_delete (void *DBF, gnutls_datum_t KEY)
     Defined in `gntlsfnc.web'.

 -- Function: int print_info (gnutls_session_t SESSION)
     Defined in `gntlsfnc.web'.

 -- Function: const char * bin2hex (const void *BIN, size_t BIN_SIZE)
     Defined in `gntlsfnc.web'.

 -- Function: void print_x509_certificate_info (gnutls_session_t
          SESSION)
     Defined in `gntlsfnc.web'.

 -- Function: int extract_dn_fields (gnutls_x509_crt_t& CERT,
          X509_Cert_Type* X509_CERT = 0,
          bool SUBJECT = true,
          Scan_Parse_Parameter_Type* PARAM = 0)
     Defined in `gntlsfnc.web'.  The |bool subject| argument should be
     |false| when this function is used for the issuer's certificate.

 -- Function: void* listen_auth (void* v)
     Defined in `lstnfncs.web'.

     Thread function, called via `pthread_ctreate' in `main' of
     `optdbsrv'.

     This function "listens" in an endless "accept" loop on a port
     (5556 per default) for incoming connections with
     authentication/authorization using X.509 certificates.

     Theoretically, any application could contact the server, but in
     practice it only makes sense for `optdbcli' (or `optdbcli_1') to
     do this.

     After contact is initiated, a GNUTLS session is started and X.509
     certificates are exchanged for mutual authentication/authorization.
     If this fails, the connection is broken off.  If it succeeds, it
     will a new thread with the function `connect_func' as its thread
     function.  First, however, it creates a new object of type
     `Scan_Parse_Parameter_Type'.  A pointer to this object is passed
     to `pthread_create' as a parameter and on to `connect_func'.
     `listen_func' sets several data members of this
     `Scan_Parse_Parameter_Type';  in particular, `listen_func' creates
     a connection to the MySQL database and this connection is
     represented by `MYSQL* Scan_Parse_Parameter_Type::mysql_ptr'.  (If
     `listen_func' fails to create the connection to the database, the
     thread will exit unsuccessfully.

     The new thread is created with the attribute
     `PTHREAD_CREATE_DETACHED', so that `listen_func' doesn't have to
     join with it.  There's no need to check whether `connect_func'
     succeeds or fails and any errors or warnings will be logged.

     Theoretically, if no errors occur, `listen_auth' could run
     forever, waiting for and handling incoming connections.  However,
     it does contain some "clean-up" code following the main "accept"
     loop.


 -- Function: void* listen_non_auth (void* v)
     Defined in `lstnfncs.web'.

     Thread function, called via `pthread_ctreate' in `main' of
     `optdbsrv'.  It is analogous to `listen_func' (see above), except
     that `listen_non_auth' doesn't require any form of
     authentication/authorization on the part of the client.  It is
     assumed that any authentication/authorization required has been
     performed in some other way before the client application has been
     called.

     The default port on which `listen_non_auth' listens is 5557.


 -- Function: int tcp_connect (string ip_address = "127.0.0.1", string
          port_str = "5556")
     Defined in `helper.web'.

 -- Function: void tcp_close (int SD)
     Defined in `helper.web'.

 -- Function: void* get_in_addr (struct sockaddr *sa)
     Defined in `helper.web'.


File: installer.info,  Node: X509_Cert_Type Reference,  Next: Proxy Credential Function Reference,  Prev: TLS Connections,  Up: Top

12 X509_Cert_Type Reference
***************************

`class X509_Cert_Type' is defined in `x509cert.web'.

   The following classes and functions are `friends' of
`X509_Cert_Type'.

Classes:
`Distinguished_Name_Type'
     *note Distinguished_Name_Type Reference::

`Scan_Parse_Parameter_Type'
     *note Scan_Parse_Parameter_Type Reference::.

Functions:
`connect_func'
     *note Server Connection Function Reference::.

`extract_dn_fields'
     *note TLS Functions::

`verify_certificate_chain'
     *note TLS Functions::

* Menu:

* X509_Cert_Type Data Members::
* X509_Cert_Type Member Functions::


File: installer.info,  Node: X509_Cert_Type Data Members,  Next: X509_Cert_Type Member Functions,  Up: X509_Cert_Type Reference

12.1 Data Members
=================

 -- Private variables: string organization
 -- : string organizationalUnitName
 -- : string commonName
 -- : string countryName
 -- : string localityName
 -- : string stateOrProvinceName
 -- : unsigned int serialNumber
 -- : time_t Validity_notBefore
 -- : time_t Validity_notAfter
 -- : X509_Cert_Type* issuer_cert
 -- : string user_name
 -- : unsigned int user_id


File: installer.info,  Node: X509_Cert_Type Member Functions,  Prev: X509_Cert_Type Data Members,  Up: X509_Cert_Type Reference

12.2 Member Functions
=====================

 -- Default constructor: void X509_Cert_Type (`void')

 -- Constructor: void X509_Cert_Type (`unsigned int' SSERIALNUMBER,
          `X509_Cert_Type' *IISSUER_CERT `= 0',
          `string' OORGANIZATION  `= ""',
          `string' OORGANIZATIONALUNITNAME  `= ""',
          `string' CCOMMONNAME  `= ""',
          `string' CCOUNTRYNAME  `= ""',
          `string' LLOCALITYNAME  `= ""',
          `string' SSTATEORPROVINCENAME  `= ""',
          `unsigned int' UUSER_ID `= 0',
          `string' UUSER_NAME  `= ""',
          `time_t' VVALIDITY_NOTBEFORE `= 0',
          `time_t' VVALIDITY_NOTAFTER `= 0')

 -- Function: int set (`unsigned int' sserialNumber,
          `X509_Cert_Type*' iissuer_cert = 0,
          `string' oorganization = "",
          `string' oorganizationalUnitName = "",
          `string' ccommonName = "",
          `string' ccountryName = "",
          `string' llocalityName = "",
          `string' sstateOrProvinceName = "",
          `unsigned int' uuser_id = 0,
          `string' uuser_name = "",
          `time_t' VValidity_notBefore = 0,
          `time_t' VValidity_notAfter = 0)

 -- Function: void show (`string' S = "", `Scan_Parse_Parameter_Type *'
          PARAM = 0, `bool' SHOW_ISSUER = FALSE)

 -- Function: bool is_in_database (`Scan_Parse_Parameter_Type *' PARAM
          = 0)

 -- Function: int insert (`Scan_Parse_Parameter_Type *' PARAM = 0)

 -- Function: string get_database_username (`Scan_Parse_Parameter_Type
          *' PARAM = 0)


File: installer.info,  Node: Proxy Credential Function Reference,  Next: Scanner Server,  Prev: X509_Cert_Type Reference,  Up: Top

13 Proxy Credential Function Reference
**************************************

The variables, constants and functions described in this chapter are
declared and/or defined in `dhprxcrt.web'.

 -- Constant: string certtool_path
     File-local in `dhprxcrt.web'.  The value of this constant depends
     on conditionally compiled code.  On optinum-srv.gwdg.de, it's
     `/opt/optinum/dbsrvcli/bin/certtool'.  Otherwise it's certtool,
     which implies that the path to the latter must be listed in the
     `PATH' variable defined in the user's environment.

 -- Function: int handle_proxy_cred (string LOCAL_PROXY_CRED_FILENAME =
          `proxy_cred_filename')
     Return values:

    0
          Success

    1
          Local proxy credential filename is empty

    2
          Failed to open local proxy credential file

    3
          `popen' error:  Call to `certtool' failed

    4
          `fread' error:  Failed to read output of `certtool'.

    5
          Too many characters in `certtool' output (> 1048575)

    6
          Failed to verify certificate chain:  Expired

    7
          Failed to verify certificate chain:  Other reason

    8
          `popen' error:  Call to `certtool -i' failed

    9
          `fread' error:  Failed to read output of `certtool -i'

    10
          Failed to find "Validity" information in proxy credential

    11
          Failed to find "Validity:  Not Before" information in proxy
          credential

    12
          Failed to find "Validity:  Not After" information in proxy
          credential

    13
          `popen' error:  Calls to `date' failed

    14
          `fscanf' or `getline' error:  Failed to read output of calls
          to `date'

    15
          Failed to set time in "seconds since the epoch" correctly

    16
          proxy credential not yet valid:  Present time < "Not Before"
          value

    17
          proxy credential expired:  Present time > "Not After" value


 -- Function: int extract_distinguished_name (string CERT_FILENAME,
          string &DN, bool IS_PROXY = `false')


File: installer.info,  Node: Scanner Server,  Next: Parser Server,  Prev: Proxy Credential Function Reference,  Up: Top

14 Scanner Server
*****************

The input file for the server's scanner is `scanner.web'.

* Menu:

* Scanner Server Variables::
* Scanner Server Functions::


File: installer.info,  Node: Scanner Server Variables,  Next: Scanner Server Functions,  Up: Scanner Server

14.1 Scanner Server Variables
=============================

 -- Variable: bool DEBUG_SCANNER


File: installer.info,  Node: Scanner Server Functions,  Prev: Scanner Server Variables,  Up: Scanner Server

14.2 Scanner Server Functions
=============================

 -- Function: int yylex (YYSTYPE *LVALP, yyscan_t PARAMETER)

 -- Function: int yywrap (`yyscan_t' parameter)

 -- Function: int yyerror (`void*' v, `char const*' s)


File: installer.info,  Node: Parser Server,  Next: Scanner Client,  Prev: Scanner Server,  Up: Top

15 Parser Server
****************

Terminal symbols (a.k.a., "tokens") in Bison are implemented as
preprocessor macros, defined in the header file created by Bison when
it's invoked using the `-d' or `--defines' option.  This header file
must be included in all C or C++  source files that refer to these
terminal symbols.  Since CPP (the C preprocessor) has no concept of
namespaces, it is therefore necessary to ensure that the names of these
terminal symbols differ from those of any other entities defined in the
source code.  For this reason, all of the terminal symbols defined by
the programmer (as opposed to Bison itself) have the suffix "`_YY'".
Similarly, the terminal symbols in the parser for the client have the
suffix "`_ZZ'" (*note Parser Client::).

* Menu:

* Parser Server Symbols Rules and States::
* Parser Server Functions::


File: installer.info,  Node: Parser Server Symbols Rules and States,  Next: Parser Server Functions,  Up: Parser Server

15.1 Parser Server Symbols, Rules and States
============================================

This section consists the contents of the file `parser.output', which
is generated automatically by Bison and contains information about the
server parser.

Terminals unused in grammar

   HYPHEN_YY
   COLON_YY
   EXCLAMATION_POINT_YY
   FILE_YY
   GET_YY
   EXTRACT_YY
   AND_YY
   LEVEL_YY
   HOST_YY
   SECRET_KEY_YY
   UNSIGNED_INTEGER_YY
   FLOAT_YY


State 109 conflicts: 2 shift/reduce
State 402 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statement_list END_YY

    2 statement_list: /* empty */
    3               | statement_list statement

    4 statement: START_ENTRY_YY entry_statement_list END_ENTRY_YY

    5 entry_statement_list: /* empty */
    6                     | entry_statement_list keyword_value_pair
    7                     | entry_statement_list prerequisite_statement
    8                     | entry_statement_list PRIVATE_YY
    9                     | entry_statement_list PUBLIC_YY

   10 keyword_value_pair: PACKAGE_NAME_YY STRING_YY
   11                   | PACKAGE_VERSION_YY STRING_YY
   12                   | PACKAGE_VERSION_YY INTEGER_YY
   13                   | DOWNLOAD_URL_YY STRING_YY
   14                   | DOWNLOAD_URL_ENCRYPTED_YY STRING_YY
   15                   | DOWNLOAD_COMMAND_YY STRING_YY
   16                   | DOWNLOAD_COMMAND_ENCRYPTED_YY STRING_YY
   17                   | INSTALLATION_SCRIPT_YY STRING_YY
   18                   | INSTALLATION_SCRIPT_ENCRYPTED_YY STRING_YY
   19                   | OWNER_YY STRING_YY
   20                   | AUTHORIZATION_YY STRING_YY

   21 prerequisite_statement: PREREQUISITE_YY STRING_YY
   22                       | PREREQUISITE_YY STRING_YY STRING_YY

   23 statement: CLIENT_YY SENDING_YY installation_script STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   24          | CLIENT_YY SENDING_YY download_info_encrypted STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   25          | CLIENT_YY SENDING_YY AUTHORIZATION_YY STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   26          | CLIENT_FINISHED_YY
   27          | FETCH_YY INSTALLATION_SCRIPT_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY
   28          | FETCH_YY DOWNLOAD_INFO_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY
   29          | FETCH_YY AUTHORIZATION_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY
   30          | FETCH_YY PREREQUISITES_YY FOR_YY ENTRY_YY entry_string_list
   31          | RECEIVE_YY INSTALLATION_SCRIPT_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   32          | RECEIVE_YY INSTALLATION_SCRIPT_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   33          | RECEIVE_YY DOWNLOAD_INFO_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   34          | RECEIVE_YY DOWNLOAD_INFO_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   35          | RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   36          | RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   37          | RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   38          | RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   39          | RECEIVE_YY AUTHORIZATION_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   40          | RECEIVE_YY AUTHORIZATION_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   41          | VALIDATE_YY DISTINGUISHED_NAME_YY STRING_YY

   42 prerequisite_string_list: /* empty */
   43                         | prerequisite_string_list STRING_YY

   44 entry_string_list: /* empty */
   45                  | entry_string_list STRING_YY

   46 statement: ADD_YY PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY entry_string_list
   47          | DELETE_YY ENTRY_YY entry_string_list FINALLY_YY
   48          | DELETE_YY ALL_YY ENTRIES_YY FOR_YY USER_YY FINALLY_YY
   49          | MARK_YY AS_YY DELETED_YY ENTRY_YY entry_string_list
   50          | MARK_YY AS_YY DELETED_YY ALL_YY ENTRIES_YY FOR_YY USER_YY
   51          | UNDELETE_YY ENTRY_YY entry_string_list
   52          | UNDELETE_YY ALL_YY DELETED_YY ENTRIES_YY FOR_YY USER_YY
   53          | DELETE_YY PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY entry_string_list
   54          | DELETE_YY PREREQUISITES_YY FOR_YY ENTRY_YY entry_string_list
   55          | CLIENT_YY TO_YY SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY STRING_YY admin_optional

   56 admin_optional: /* empty */
   57               | ADMIN_YY

   58 statement: CLIENT_YY SENDING_YY ENVIRONMENT_YY SHELLSCRIPT_YY GLOBUS_SITE_YY STRING_YY admin_optional
   59          | FETCH_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   60          | RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY SUCCEEDED_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   61          | RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY FAILED_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   62          | DELETE_YY ENVIRONMENT_YY SHELLSCRIPTS_YY
   63          | DELETE_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   64          | DELETE_YY ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY

   65 entry_or_entries: ENTRY_YY
   66                 | ENTRIES_YY

   67 statement: SHOW_YY entry_or_entries entry_string_list show_option_list

   68 show_option_list: /* empty */
   69                 | show_option_list show_option

   70 show_option: ALL_YY
   71            | USER_YY
   72            | PUBLIC_YY
   73            | WITH_PREREQUISITES_YY
   74            | WITH_DEPENDENTS_YY
   75            | WITH_INSTALLATION_SCRIPT_YY
   76            | HTML_YY
   77            | JAVASCRIPT_YY
   78            | LEVELS_YY level_list

   79 level_list: /* empty */
   80           | level_list INTEGER_YY INTEGER_YY
   81           | level_list INTEGER_YY INTEGER_YY SEMI_COLON_YY
   82           | level_list INTEGER_YY INTEGER_YY SLASH_YY

   83 statement: SHOW_YY CERTIFICATE_YY USER_YY html_optional
   84          | SHOW_YY CERTIFICATES_YY ALL_YY html_optional

   85 html_optional: /* empty */
   86              | HTML_YY

   87 statement: SHOW_YY ENVIRONMENT_YY SHELLSCRIPTS_YY show_environment_shellscript_option_list

   88 show_environment_shellscript_option_list: /* empty */
   89                                         | show_environment_shellscript_option_list show_environment_shellscript_option

   90 show_environment_shellscript_option: USER_YY
   91                                    | GLOBUS_SITE_YY STRING_YY
   92                                    | GLOBUS_SITES_YY ALL_YY

   93 statement: ENABLE_YY ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY
   94          | DISABLE_YY ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY
   95          | CLIENT_YY RECEIVE_YY ENTRY_YY INFO_YY SUCCEEDED_YY
   96          | CLIENT_YY RECEIVE_YY ENTRY_YY INFO_YY FAILED_YY
   97          | SET_YY EFFECTIVE_USER_YY STRING_YY
   98          | ADD_YY installation_script STRING_YY TO_YY ENTRY_YY entry_string_list

   99 installation_script: INSTALLATION_SCRIPT_YY
  100                    | INSTALLATION_SCRIPT_ENCRYPTED_YY

  101 statement: ADD_YY download_info STRING_YY TO_YY ENTRY_YY entry_string_list

  102 download_info: DOWNLOAD_URL_YY
  103              | DOWNLOAD_COMMAND_YY
  104              | download_info_encrypted

  105 download_info_encrypted: DOWNLOAD_URL_ENCRYPTED_YY
  106                        | DOWNLOAD_COMMAND_ENCRYPTED_YY

  107 statement: ADD_YY AUTHORIZATION_YY STRING_YY TO_YY ENTRY_YY entry_string_list
  108          | CLIENT_YY TO_YY TRANSFER_YY PROXY_CREDENTIAL_YY STRING_YY
  109          | PROXY_CREDENTIAL_YY STRING_YY INVALID_YY CLIENT_YY NOT_YY TO_YY TRANSFER_YY
  110          | CLIENT_YY SENDING_YY PROXY_CREDENTIAL_YY

  111 install_or_reinstall: INSTALL_YY
  112                     | REINSTALL_YY

  113 package_version_optional: /* empty */
  114                         | PACKAGE_VERSION_YY STRING_YY

  115 stdout_filename_optional: /* empty */
  116                         | STDOUT_FILENAME_YY STRING_YY

  117 stderr_filename_optional: /* empty */
  118                         | STDERR_FILENAME_YY STRING_YY

  119 timeout_optional: /* empty */
  120                 | TIMEOUT_YY INTEGER_YY

  121 reinstall_prerequisites_optional: /* empty */
  122                                 | REINSTALL_YY PREREQUISITES_YY
  123                                 | NO_YY REINSTALL_YY PREREQUISITES_YY

  124 link_expression_list: /* empty */
  125                     | link_expression_list link_expression

  126 link_expression: NO_LINKS_YY
  127                | WITH_LINKS_YY
  128                | LINK_DIRECTORY_YY STRING_YY

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list
  130          | CLIENT_YY TO_YY TRANSFER_YY KEY_PAIR_YY
  131          | CLIENT_YY SENDING_YY KEY_PAIR_YY STRING_YY STRING_YY
  132          | CLIENT_YY ERROR_YY NOT_YY SENDING_YY KEY_PAIR_YY
  133          | FETCH_YY KEY_PAIR_YY
  134          | RECEIVE_YY KEY_PAIR_YY SUCCEEDED_YY
  135          | RECEIVE_YY KEY_PAIR_YY FAILED_YY

  136 globus_site_list: GLOBUS_SITES_YY ALL_YY
  137                 | GLOBUS_SITE_YY ALL_YY
  138                 | sub_globus_site_list

  139 sub_globus_site_list: GLOBUS_SITE_YY STRING_YY
  140                     | GLOBUS_SITES_YY STRING_YY
  141                     | sub_globus_site_list STRING_YY

  142 statement: DISTRIBUTE_YY KEY_PAIR_YY globus_site_list
  143          | DELETE_YY KEY_PAIR_YY FROM_YY DATABASE_YY
  144          | DELETE_YY PUBLIC_KEY_YY FROM_YY DATABASE_YY
  145          | SESSION_ID_YY STRING_YY
  146          | ADD_YY GLOBUS_SITE_YY STRING_YY globus_site_option_list

  147 globus_site_option_list: /* empty */
  148                        | globus_site_option_list globus_site_option

  149 globus_site_option: INTERACTIVE_NODE_YY STRING_YY
  150                   | APPEND_LD_LIBRARY_PATH_YY STRING_YY
  151                   | APPEND_PATH_YY STRING_YY
  152                   | OPTDBCLI_PATH_YY STRING_YY
  153                   | IP_ADDRESS_YY STRING_YY
  154                   | INTERACTIVE_NODE_IP_ADDRESS_YY STRING_YY
  155                   | ENABLED_YY
  156                   | DISABLED_YY
  157                   | REPLACE_YY

  158 statement: SHOW_YY globus_site_list html_optional
  159          | DELETE_YY GLOBUS_SITE_YY STRING_YY FINALLY_YY
  160          | MARK_YY AS_YY DELETED_YY GLOBUS_SITE_YY STRING_YY
  161          | UNDELETE_YY GLOBUS_SITE_YY STRING_YY enable_optional

  162 enable_optional: /* empty */
  163                | ENABLE_YY
  164                | DISABLE_YY

  165 statement: ENABLE_YY GLOBUS_SITE_YY STRING_YY
  166          | DISABLE_YY GLOBUS_SITE_YY STRING_YY

  167 add_or_delete: ADD_YY
  168              | DELETE_YY

  169 statement: add_or_delete ADMIN_YY GLOBUS_SITE_YY STRING_YY USER_YY INTEGER_YY
  170          | EDIT_YY GLOBUS_SITE_YY STRING_YY SET_YY globus_site_option_list
  171          | EDIT_YY GLOBUS_SITE_YY STRING_YY UNSET_YY globus_site_option_list_1

  172 globus_site_option_list_1: /* empty */
  173                          | globus_site_option_list_1 globus_site_option_1

  174 globus_site_option_1: INTERACTIVE_NODE_YY
  175                     | APPEND_LD_LIBRARY_PATH_YY
  176                     | APPEND_PATH_YY
  177                     | OPTDBCLI_PATH_YY
  178                     | IP_ADDRESS_YY
  179                     | INTERACTIVE_NODE_IP_ADDRESS_YY

  180 statement: SHOW_YY PRIVILEGES_YY USER_YY html_optional
  181          | SHOW_YY PRIVILEGES_YY ALL_YY html_optional


Terminals, with rules where they appear

$end (0) 0
error (256)
HYPHEN_YY (258)
COLON_YY (259)
SEMI_COLON_YY (260) 81
SLASH_YY (261) 82
EXCLAMATION_POINT_YY (262)
FOR_YY (263) 27 28 29 30 31 32 33 34 35 36 37 38 39 40 46 48 50 52
    53 54 59 60 61 63
TO_YY (264) 55 98 101 107 108 109 130
NOT_YY (265) 109 132
ERROR_YY (266) 132
NO_YY (267) 123
ADD_YY (268) 46 98 101 107 146 167
DELETE_YY (269) 47 48 53 54 62 63 64 143 144 159 168
DELETED_YY (270) 49 50 52 160
UNDELETE_YY (271) 51 52 161
EDIT_YY (272) 170 171
REPLACE_YY (273) 157
ENTRY_YY (274) 27 28 29 30 31 32 33 34 35 36 37 38 39 40 46 47 49 51
    53 54 65 95 96 98 101 107
START_ENTRY_YY (275) 4
END_ENTRY_YY (276) 4
END_YY (277) 1
RECEIVE_YY (278) 31 32 33 34 35 36 37 38 39 40 60 61 95 96 134 135
FILE_YY (279)
SUCCEEDED_YY (280) 31 33 35 37 39 60 95 134
FAILED_YY (281) 32 34 36 38 40 61 96 135
MARK_YY (282) 49 50 160
AS_YY (283) 49 50 160
FINALLY_YY (284) 47 48 159
STRING_YY (285) 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25 41 43
    45 55 58 59 60 61 63 91 97 98 101 107 108 109 114 116 118 128 129
    131 139 140 141 145 146 149 150 151 152 153 154 159 160 161 165
    166 169 170 171
PACKAGE_NAME_YY (286) 10 129
PACKAGE_VERSION_YY (287) 11 12 114
DOWNLOAD_INFO_YY (288) 28 33 34
DOWNLOAD_URL_YY (289) 13 35 36 102
DOWNLOAD_URL_ENCRYPTED_YY (290) 14 105
DOWNLOAD_COMMAND_YY (291) 15 37 38 103
DOWNLOAD_COMMAND_ENCRYPTED_YY (292) 16 106
PREREQUISITE_YY (293) 21 22 46 53
PREREQUISITES_YY (294) 30 54 122 123
ORDER_YY (295) 27 28 29
INSTALLATION_SCRIPT_YY (296) 17 27 31 32 99
INSTALLATION_SCRIPT_ENCRYPTED_YY (297) 18 100
AUTHORIZATION_YY (298) 20 25 29 39 40 107
CLIENT_FINISHED_YY (299) 26
CLIENT_YY (300) 23 24 25 55 58 95 96 108 109 110 130 131 132
SENDING_YY (301) 23 24 25 58 110 131 132
FETCH_YY (302) 27 28 29 30 59 133
GET_YY (303)
EXTRACT_YY (304)
VALIDATE_YY (305) 41
DISTINGUISHED_NAME_YY (306) 41
ENVIRONMENT_YY (307) 55 58 59 60 61 62 63 64 87 93 94
SHELLSCRIPT_YY (308) 55 58 60 61 64 93 94
SHELLSCRIPTS_YY (309) 59 62 63 87
ADMIN_YY (310) 57 169
ENABLE_YY (311) 93 163 165
ENABLED_YY (312) 155
DISABLE_YY (313) 94 164 166
DISABLED_YY (314) 156
SHOW_YY (315) 67 83 84 87 158 180 181
ALL_YY (316) 48 50 52 70 84 92 136 137 181
ENTRIES_YY (317) 48 50 52 66
AND_YY (318)
USER_YY (319) 48 50 52 71 83 90 169 180
SET_YY (320) 97 170
UNSET_YY (321) 171
PUBLIC_YY (322) 9 72
PRIVATE_YY (323) 8
WITH_PREREQUISITES_YY (324) 73
WITH_DEPENDENTS_YY (325) 74
WITH_INSTALLATION_SCRIPT_YY (326) 75
HTML_YY (327) 76 86
JAVASCRIPT_YY (328) 77
LEVEL_YY (329)
LEVELS_YY (330) 78
INFO_YY (331) 95 96
EFFECTIVE_USER_YY (332) 97
CERTIFICATE_YY (333) 83
CERTIFICATES_YY (334) 84
PRIVILEGES_YY (335) 180 181
ENCRYPTED_YY (336) 35 36 37 38
OWNER_YY (337) 19
TRANSFER_YY (338) 108 109 130
PROXY_CREDENTIAL_YY (339) 108 109 110
INVALID_YY (340) 109
SEND_YY (341) 55
INSTALL_YY (342) 111
REINSTALL_YY (343) 112 122 123
GLOBUS_SITE_YY (344) 55 58 59 60 61 63 91 129 137 139 146 159 160 161
    165 166 169 170 171
HOST_YY (345)
GLOBUS_SITES_YY (346) 92 136 140
STDOUT_FILENAME_YY (347) 116
STDERR_FILENAME_YY (348) 118
TIMEOUT_YY (349) 120
INTERACTIVE_NODE_YY (350) 149 174
APPEND_LD_LIBRARY_PATH_YY (351) 150 175
APPEND_PATH_YY (352) 151 176
OPTDBCLI_PATH_YY (353) 152 177
IP_ADDRESS_YY (354) 153 178
INTERACTIVE_NODE_IP_ADDRESS_YY (355) 154 179
NO_LINKS_YY (356) 126
WITH_LINKS_YY (357) 127
LINK_DIRECTORY_YY (358) 128
SECRET_KEY_YY (359)
PUBLIC_KEY_YY (360) 144
KEY_PAIR_YY (361) 130 131 132 133 134 135 142 143
DISTRIBUTE_YY (362) 142
FROM_YY (363) 143 144
DATABASE_YY (364) 143 144
SESSION_ID_YY (365) 145
INTEGER_YY (366) 12 23 24 25 27 28 29 64 80 81 82 93 94 120 169
UNSIGNED_INTEGER_YY (367)
FLOAT_YY (368)


Nonterminals, with rules where they appear

$accept (114)
    on left: 0
program (115)
    on left: 1, on right: 0
statement_list (116)
    on left: 2 3, on right: 1 3
statement (117)
    on left: 4 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
    41 46 47 48 49 50 51 52 53 54 55 58 59 60 61 62 63 64 67 83 84
    87 93 94 95 96 97 98 101 107 108 109 110 129 130 131 132 133 134
    135 142 143 144 145 146 158 159 160 161 165 166 169 170 171 180
    181, on right: 3
entry_statement_list (118)
    on left: 5 6 7 8 9, on right: 4 6 7 8 9
keyword_value_pair (119)
    on left: 10 11 12 13 14 15 16 17 18 19 20, on right: 6
prerequisite_statement (120)
    on left: 21 22, on right: 7
prerequisite_string_list (121)
    on left: 42 43, on right: 43 46 53
entry_string_list (122)
    on left: 44 45, on right: 23 24 25 27 28 29 30 31 32 33 34 35 36
    37 38 39 40 45 46 47 49 51 53 54 67 98 101 107
admin_optional (123)
    on left: 56 57, on right: 55 58
entry_or_entries (124)
    on left: 65 66, on right: 67
show_option_list (125)
    on left: 68 69, on right: 67 69
show_option (126)
    on left: 70 71 72 73 74 75 76 77 78, on right: 69
level_list (127)
    on left: 79 80 81 82, on right: 78 80 81 82
html_optional (128)
    on left: 85 86, on right: 83 84 158 180 181
show_environment_shellscript_option_list (129)
    on left: 88 89, on right: 87 89
show_environment_shellscript_option (130)
    on left: 90 91 92, on right: 89
installation_script (131)
    on left: 99 100, on right: 23 98
download_info (132)
    on left: 102 103 104, on right: 101
download_info_encrypted (133)
    on left: 105 106, on right: 24 104
install_or_reinstall (134)
    on left: 111 112, on right: 129
package_version_optional (135)
    on left: 113 114, on right: 129
stdout_filename_optional (136)
    on left: 115 116, on right: 129
stderr_filename_optional (137)
    on left: 117 118, on right: 129
timeout_optional (138)
    on left: 119 120, on right: 129
reinstall_prerequisites_optional (139)
    on left: 121 122 123, on right: 129
link_expression_list (140)
    on left: 124 125, on right: 125 129
link_expression (141)
    on left: 126 127 128, on right: 125
globus_site_list (142)
    on left: 136 137 138, on right: 142 158
sub_globus_site_list (143)
    on left: 139 140 141, on right: 138 141
globus_site_option_list (144)
    on left: 147 148, on right: 146 148 170
globus_site_option (145)
    on left: 149 150 151 152 153 154 155 156 157, on right: 148
enable_optional (146)
    on left: 162 163 164, on right: 161
add_or_delete (147)
    on left: 167 168, on right: 169
globus_site_option_list_1 (148)
    on left: 172 173, on right: 171 173
globus_site_option_1 (149)
    on left: 174 175 176 177 178 179, on right: 173


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (statement_list)

    program         go to state 1
    statement_list  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: statement_list . END_YY
    3 statement_list: statement_list . statement

    ADD_YY               shift, and go to state 4
    DELETE_YY            shift, and go to state 5
    UNDELETE_YY          shift, and go to state 6
    EDIT_YY              shift, and go to state 7
    START_ENTRY_YY       shift, and go to state 8
    END_YY               shift, and go to state 9
    RECEIVE_YY           shift, and go to state 10
    MARK_YY              shift, and go to state 11
    CLIENT_FINISHED_YY   shift, and go to state 12
    CLIENT_YY            shift, and go to state 13
    FETCH_YY             shift, and go to state 14
    VALIDATE_YY          shift, and go to state 15
    ENABLE_YY            shift, and go to state 16
    DISABLE_YY           shift, and go to state 17
    SHOW_YY              shift, and go to state 18
    SET_YY               shift, and go to state 19
    PROXY_CREDENTIAL_YY  shift, and go to state 20
    INSTALL_YY           shift, and go to state 21
    REINSTALL_YY         shift, and go to state 22
    DISTRIBUTE_YY        shift, and go to state 23
    SESSION_ID_YY        shift, and go to state 24

    statement             go to state 25
    install_or_reinstall  go to state 26
    add_or_delete         go to state 27


state 3

    0 $accept: program $end .

    $default  accept


state 4

   46 statement: ADD_YY . PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY entry_string_list
   98          | ADD_YY . installation_script STRING_YY TO_YY ENTRY_YY entry_string_list
  101          | ADD_YY . download_info STRING_YY TO_YY ENTRY_YY entry_string_list
  107          | ADD_YY . AUTHORIZATION_YY STRING_YY TO_YY ENTRY_YY entry_string_list
  146          | ADD_YY . GLOBUS_SITE_YY STRING_YY globus_site_option_list
  167 add_or_delete: ADD_YY .

    DOWNLOAD_URL_YY                   shift, and go to state 28
    DOWNLOAD_URL_ENCRYPTED_YY         shift, and go to state 29
    DOWNLOAD_COMMAND_YY               shift, and go to state 30
    DOWNLOAD_COMMAND_ENCRYPTED_YY     shift, and go to state 31
    PREREQUISITE_YY                   shift, and go to state 32
    INSTALLATION_SCRIPT_YY            shift, and go to state 33
    INSTALLATION_SCRIPT_ENCRYPTED_YY  shift, and go to state 34
    AUTHORIZATION_YY                  shift, and go to state 35
    GLOBUS_SITE_YY                    shift, and go to state 36

    $default  reduce using rule 167 (add_or_delete)

    installation_script      go to state 37
    download_info            go to state 38
    download_info_encrypted  go to state 39


state 5

   47 statement: DELETE_YY . ENTRY_YY entry_string_list FINALLY_YY
   48          | DELETE_YY . ALL_YY ENTRIES_YY FOR_YY USER_YY FINALLY_YY
   53          | DELETE_YY . PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY entry_string_list
   54          | DELETE_YY . PREREQUISITES_YY FOR_YY ENTRY_YY entry_string_list
   62          | DELETE_YY . ENVIRONMENT_YY SHELLSCRIPTS_YY
   63          | DELETE_YY . ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   64          | DELETE_YY . ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY
  143          | DELETE_YY . KEY_PAIR_YY FROM_YY DATABASE_YY
  144          | DELETE_YY . PUBLIC_KEY_YY FROM_YY DATABASE_YY
  159          | DELETE_YY . GLOBUS_SITE_YY STRING_YY FINALLY_YY
  168 add_or_delete: DELETE_YY .

    ENTRY_YY          shift, and go to state 40
    PREREQUISITE_YY   shift, and go to state 41
    PREREQUISITES_YY  shift, and go to state 42
    ENVIRONMENT_YY    shift, and go to state 43
    ALL_YY            shift, and go to state 44
    GLOBUS_SITE_YY    shift, and go to state 45
    PUBLIC_KEY_YY     shift, and go to state 46
    KEY_PAIR_YY       shift, and go to state 47

    $default  reduce using rule 168 (add_or_delete)


state 6

   51 statement: UNDELETE_YY . ENTRY_YY entry_string_list
   52          | UNDELETE_YY . ALL_YY DELETED_YY ENTRIES_YY FOR_YY USER_YY
  161          | UNDELETE_YY . GLOBUS_SITE_YY STRING_YY enable_optional

    ENTRY_YY        shift, and go to state 48
    ALL_YY          shift, and go to state 49
    GLOBUS_SITE_YY  shift, and go to state 50


state 7

  170 statement: EDIT_YY . GLOBUS_SITE_YY STRING_YY SET_YY globus_site_option_list
  171          | EDIT_YY . GLOBUS_SITE_YY STRING_YY UNSET_YY globus_site_option_list_1

    GLOBUS_SITE_YY  shift, and go to state 51


state 8

    4 statement: START_ENTRY_YY . entry_statement_list END_ENTRY_YY

    $default  reduce using rule 5 (entry_statement_list)

    entry_statement_list  go to state 52


state 9

    1 program: statement_list END_YY .

    $default  reduce using rule 1 (program)


state 10

   31 statement: RECEIVE_YY . INSTALLATION_SCRIPT_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   32          | RECEIVE_YY . INSTALLATION_SCRIPT_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   33          | RECEIVE_YY . DOWNLOAD_INFO_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   34          | RECEIVE_YY . DOWNLOAD_INFO_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   35          | RECEIVE_YY . DOWNLOAD_URL_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   36          | RECEIVE_YY . DOWNLOAD_URL_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   37          | RECEIVE_YY . DOWNLOAD_COMMAND_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   38          | RECEIVE_YY . DOWNLOAD_COMMAND_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   39          | RECEIVE_YY . AUTHORIZATION_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   40          | RECEIVE_YY . AUTHORIZATION_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list
   60          | RECEIVE_YY . ENVIRONMENT_YY SHELLSCRIPT_YY SUCCEEDED_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   61          | RECEIVE_YY . ENVIRONMENT_YY SHELLSCRIPT_YY FAILED_YY FOR_YY GLOBUS_SITE_YY STRING_YY
  134          | RECEIVE_YY . KEY_PAIR_YY SUCCEEDED_YY
  135          | RECEIVE_YY . KEY_PAIR_YY FAILED_YY

    DOWNLOAD_INFO_YY        shift, and go to state 53
    DOWNLOAD_URL_YY         shift, and go to state 54
    DOWNLOAD_COMMAND_YY     shift, and go to state 55
    INSTALLATION_SCRIPT_YY  shift, and go to state 56
    AUTHORIZATION_YY        shift, and go to state 57
    ENVIRONMENT_YY          shift, and go to state 58
    KEY_PAIR_YY             shift, and go to state 59


state 11

   49 statement: MARK_YY . AS_YY DELETED_YY ENTRY_YY entry_string_list
   50          | MARK_YY . AS_YY DELETED_YY ALL_YY ENTRIES_YY FOR_YY USER_YY
  160          | MARK_YY . AS_YY DELETED_YY GLOBUS_SITE_YY STRING_YY

    AS_YY  shift, and go to state 60


state 12

   26 statement: CLIENT_FINISHED_YY .

    $default  reduce using rule 26 (statement)


state 13

   23 statement: CLIENT_YY . SENDING_YY installation_script STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   24          | CLIENT_YY . SENDING_YY download_info_encrypted STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   25          | CLIENT_YY . SENDING_YY AUTHORIZATION_YY STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   55          | CLIENT_YY . TO_YY SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY STRING_YY admin_optional
   58          | CLIENT_YY . SENDING_YY ENVIRONMENT_YY SHELLSCRIPT_YY GLOBUS_SITE_YY STRING_YY admin_optional
   95          | CLIENT_YY . RECEIVE_YY ENTRY_YY INFO_YY SUCCEEDED_YY
   96          | CLIENT_YY . RECEIVE_YY ENTRY_YY INFO_YY FAILED_YY
  108          | CLIENT_YY . TO_YY TRANSFER_YY PROXY_CREDENTIAL_YY STRING_YY
  110          | CLIENT_YY . SENDING_YY PROXY_CREDENTIAL_YY
  130          | CLIENT_YY . TO_YY TRANSFER_YY KEY_PAIR_YY
  131          | CLIENT_YY . SENDING_YY KEY_PAIR_YY STRING_YY STRING_YY
  132          | CLIENT_YY . ERROR_YY NOT_YY SENDING_YY KEY_PAIR_YY

    TO_YY       shift, and go to state 61
    ERROR_YY    shift, and go to state 62
    RECEIVE_YY  shift, and go to state 63
    SENDING_YY  shift, and go to state 64


state 14

   27 statement: FETCH_YY . INSTALLATION_SCRIPT_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY
   28          | FETCH_YY . DOWNLOAD_INFO_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY
   29          | FETCH_YY . AUTHORIZATION_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY
   30          | FETCH_YY . PREREQUISITES_YY FOR_YY ENTRY_YY entry_string_list
   59          | FETCH_YY . ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY
  133          | FETCH_YY . KEY_PAIR_YY

    DOWNLOAD_INFO_YY        shift, and go to state 65
    PREREQUISITES_YY        shift, and go to state 66
    INSTALLATION_SCRIPT_YY  shift, and go to state 67
    AUTHORIZATION_YY        shift, and go to state 68
    ENVIRONMENT_YY          shift, and go to state 69
    KEY_PAIR_YY             shift, and go to state 70


state 15

   41 statement: VALIDATE_YY . DISTINGUISHED_NAME_YY STRING_YY

    DISTINGUISHED_NAME_YY  shift, and go to state 71


state 16

   93 statement: ENABLE_YY . ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY
  165          | ENABLE_YY . GLOBUS_SITE_YY STRING_YY

    ENVIRONMENT_YY  shift, and go to state 72
    GLOBUS_SITE_YY  shift, and go to state 73


state 17

   94 statement: DISABLE_YY . ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY
  166          | DISABLE_YY . GLOBUS_SITE_YY STRING_YY

    ENVIRONMENT_YY  shift, and go to state 74
    GLOBUS_SITE_YY  shift, and go to state 75


state 18

   67 statement: SHOW_YY . entry_or_entries entry_string_list show_option_list
   83          | SHOW_YY . CERTIFICATE_YY USER_YY html_optional
   84          | SHOW_YY . CERTIFICATES_YY ALL_YY html_optional
   87          | SHOW_YY . ENVIRONMENT_YY SHELLSCRIPTS_YY show_environment_shellscript_option_list
  158          | SHOW_YY . globus_site_list html_optional
  180          | SHOW_YY . PRIVILEGES_YY USER_YY html_optional
  181          | SHOW_YY . PRIVILEGES_YY ALL_YY html_optional

    ENTRY_YY         shift, and go to state 76
    ENVIRONMENT_YY   shift, and go to state 77
    ENTRIES_YY       shift, and go to state 78
    CERTIFICATE_YY   shift, and go to state 79
    CERTIFICATES_YY  shift, and go to state 80
    PRIVILEGES_YY    shift, and go to state 81
    GLOBUS_SITE_YY   shift, and go to state 82
    GLOBUS_SITES_YY  shift, and go to state 83

    entry_or_entries      go to state 84
    globus_site_list      go to state 85
    sub_globus_site_list  go to state 86


state 19

   97 statement: SET_YY . EFFECTIVE_USER_YY STRING_YY

    EFFECTIVE_USER_YY  shift, and go to state 87


state 20

  109 statement: PROXY_CREDENTIAL_YY . STRING_YY INVALID_YY CLIENT_YY NOT_YY TO_YY TRANSFER_YY

    STRING_YY  shift, and go to state 88


state 21

  111 install_or_reinstall: INSTALL_YY .

    $default  reduce using rule 111 (install_or_reinstall)


state 22

  112 install_or_reinstall: REINSTALL_YY .

    $default  reduce using rule 112 (install_or_reinstall)


state 23

  142 statement: DISTRIBUTE_YY . KEY_PAIR_YY globus_site_list

    KEY_PAIR_YY  shift, and go to state 89


state 24

  145 statement: SESSION_ID_YY . STRING_YY

    STRING_YY  shift, and go to state 90


state 25

    3 statement_list: statement_list statement .

    $default  reduce using rule 3 (statement_list)


state 26

  129 statement: install_or_reinstall . PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list

    PACKAGE_NAME_YY  shift, and go to state 91


state 27

  169 statement: add_or_delete . ADMIN_YY GLOBUS_SITE_YY STRING_YY USER_YY INTEGER_YY

    ADMIN_YY  shift, and go to state 92


state 28

  102 download_info: DOWNLOAD_URL_YY .

    $default  reduce using rule 102 (download_info)


state 29

  105 download_info_encrypted: DOWNLOAD_URL_ENCRYPTED_YY .

    $default  reduce using rule 105 (download_info_encrypted)


state 30

  103 download_info: DOWNLOAD_COMMAND_YY .

    $default  reduce using rule 103 (download_info)


state 31

  106 download_info_encrypted: DOWNLOAD_COMMAND_ENCRYPTED_YY .

    $default  reduce using rule 106 (download_info_encrypted)


state 32

   46 statement: ADD_YY PREREQUISITE_YY . prerequisite_string_list FOR_YY ENTRY_YY entry_string_list

    $default  reduce using rule 42 (prerequisite_string_list)

    prerequisite_string_list  go to state 93


state 33

   99 installation_script: INSTALLATION_SCRIPT_YY .

    $default  reduce using rule 99 (installation_script)


state 34

  100 installation_script: INSTALLATION_SCRIPT_ENCRYPTED_YY .

    $default  reduce using rule 100 (installation_script)


state 35

  107 statement: ADD_YY AUTHORIZATION_YY . STRING_YY TO_YY ENTRY_YY entry_string_list

    STRING_YY  shift, and go to state 94


state 36

  146 statement: ADD_YY GLOBUS_SITE_YY . STRING_YY globus_site_option_list

    STRING_YY  shift, and go to state 95


state 37

   98 statement: ADD_YY installation_script . STRING_YY TO_YY ENTRY_YY entry_string_list

    STRING_YY  shift, and go to state 96


state 38

  101 statement: ADD_YY download_info . STRING_YY TO_YY ENTRY_YY entry_string_list

    STRING_YY  shift, and go to state 97


state 39

  104 download_info: download_info_encrypted .

    $default  reduce using rule 104 (download_info)


state 40

   47 statement: DELETE_YY ENTRY_YY . entry_string_list FINALLY_YY

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 98


state 41

   53 statement: DELETE_YY PREREQUISITE_YY . prerequisite_string_list FOR_YY ENTRY_YY entry_string_list

    $default  reduce using rule 42 (prerequisite_string_list)

    prerequisite_string_list  go to state 99


state 42

   54 statement: DELETE_YY PREREQUISITES_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 100


state 43

   62 statement: DELETE_YY ENVIRONMENT_YY . SHELLSCRIPTS_YY
   63          | DELETE_YY ENVIRONMENT_YY . SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   64          | DELETE_YY ENVIRONMENT_YY . SHELLSCRIPT_YY INTEGER_YY

    SHELLSCRIPT_YY   shift, and go to state 101
    SHELLSCRIPTS_YY  shift, and go to state 102


state 44

   48 statement: DELETE_YY ALL_YY . ENTRIES_YY FOR_YY USER_YY FINALLY_YY

    ENTRIES_YY  shift, and go to state 103


state 45

  159 statement: DELETE_YY GLOBUS_SITE_YY . STRING_YY FINALLY_YY

    STRING_YY  shift, and go to state 104


state 46

  144 statement: DELETE_YY PUBLIC_KEY_YY . FROM_YY DATABASE_YY

    FROM_YY  shift, and go to state 105


state 47

  143 statement: DELETE_YY KEY_PAIR_YY . FROM_YY DATABASE_YY

    FROM_YY  shift, and go to state 106


state 48

   51 statement: UNDELETE_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 107


state 49

   52 statement: UNDELETE_YY ALL_YY . DELETED_YY ENTRIES_YY FOR_YY USER_YY

    DELETED_YY  shift, and go to state 108


state 50

  161 statement: UNDELETE_YY GLOBUS_SITE_YY . STRING_YY enable_optional

    STRING_YY  shift, and go to state 109


state 51

  170 statement: EDIT_YY GLOBUS_SITE_YY . STRING_YY SET_YY globus_site_option_list
  171          | EDIT_YY GLOBUS_SITE_YY . STRING_YY UNSET_YY globus_site_option_list_1

    STRING_YY  shift, and go to state 110


state 52

    4 statement: START_ENTRY_YY entry_statement_list . END_ENTRY_YY
    6 entry_statement_list: entry_statement_list . keyword_value_pair
    7                     | entry_statement_list . prerequisite_statement
    8                     | entry_statement_list . PRIVATE_YY
    9                     | entry_statement_list . PUBLIC_YY

    END_ENTRY_YY                      shift, and go to state 111
    PACKAGE_NAME_YY                   shift, and go to state 112
    PACKAGE_VERSION_YY                shift, and go to state 113
    DOWNLOAD_URL_YY                   shift, and go to state 114
    DOWNLOAD_URL_ENCRYPTED_YY         shift, and go to state 115
    DOWNLOAD_COMMAND_YY               shift, and go to state 116
    DOWNLOAD_COMMAND_ENCRYPTED_YY     shift, and go to state 117
    PREREQUISITE_YY                   shift, and go to state 118
    INSTALLATION_SCRIPT_YY            shift, and go to state 119
    INSTALLATION_SCRIPT_ENCRYPTED_YY  shift, and go to state 120
    AUTHORIZATION_YY                  shift, and go to state 121
    PUBLIC_YY                         shift, and go to state 122
    PRIVATE_YY                        shift, and go to state 123
    OWNER_YY                          shift, and go to state 124

    keyword_value_pair      go to state 125
    prerequisite_statement  go to state 126


state 53

   33 statement: RECEIVE_YY DOWNLOAD_INFO_YY . SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   34          | RECEIVE_YY DOWNLOAD_INFO_YY . FAILED_YY FOR_YY ENTRY_YY entry_string_list

    SUCCEEDED_YY  shift, and go to state 127
    FAILED_YY     shift, and go to state 128


state 54

   35 statement: RECEIVE_YY DOWNLOAD_URL_YY . ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   36          | RECEIVE_YY DOWNLOAD_URL_YY . ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list

    ENCRYPTED_YY  shift, and go to state 129


state 55

   37 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY . ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   38          | RECEIVE_YY DOWNLOAD_COMMAND_YY . ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list

    ENCRYPTED_YY  shift, and go to state 130


state 56

   31 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY . SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   32          | RECEIVE_YY INSTALLATION_SCRIPT_YY . FAILED_YY FOR_YY ENTRY_YY entry_string_list

    SUCCEEDED_YY  shift, and go to state 131
    FAILED_YY     shift, and go to state 132


state 57

   39 statement: RECEIVE_YY AUTHORIZATION_YY . SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   40          | RECEIVE_YY AUTHORIZATION_YY . FAILED_YY FOR_YY ENTRY_YY entry_string_list

    SUCCEEDED_YY  shift, and go to state 133
    FAILED_YY     shift, and go to state 134


state 58

   60 statement: RECEIVE_YY ENVIRONMENT_YY . SHELLSCRIPT_YY SUCCEEDED_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   61          | RECEIVE_YY ENVIRONMENT_YY . SHELLSCRIPT_YY FAILED_YY FOR_YY GLOBUS_SITE_YY STRING_YY

    SHELLSCRIPT_YY  shift, and go to state 135


state 59

  134 statement: RECEIVE_YY KEY_PAIR_YY . SUCCEEDED_YY
  135          | RECEIVE_YY KEY_PAIR_YY . FAILED_YY

    SUCCEEDED_YY  shift, and go to state 136
    FAILED_YY     shift, and go to state 137


state 60

   49 statement: MARK_YY AS_YY . DELETED_YY ENTRY_YY entry_string_list
   50          | MARK_YY AS_YY . DELETED_YY ALL_YY ENTRIES_YY FOR_YY USER_YY
  160          | MARK_YY AS_YY . DELETED_YY GLOBUS_SITE_YY STRING_YY

    DELETED_YY  shift, and go to state 138


state 61

   55 statement: CLIENT_YY TO_YY . SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY STRING_YY admin_optional
  108          | CLIENT_YY TO_YY . TRANSFER_YY PROXY_CREDENTIAL_YY STRING_YY
  130          | CLIENT_YY TO_YY . TRANSFER_YY KEY_PAIR_YY

    TRANSFER_YY  shift, and go to state 139
    SEND_YY      shift, and go to state 140


state 62

  132 statement: CLIENT_YY ERROR_YY . NOT_YY SENDING_YY KEY_PAIR_YY

    NOT_YY  shift, and go to state 141


state 63

   95 statement: CLIENT_YY RECEIVE_YY . ENTRY_YY INFO_YY SUCCEEDED_YY
   96          | CLIENT_YY RECEIVE_YY . ENTRY_YY INFO_YY FAILED_YY

    ENTRY_YY  shift, and go to state 142


state 64

   23 statement: CLIENT_YY SENDING_YY . installation_script STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   24          | CLIENT_YY SENDING_YY . download_info_encrypted STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   25          | CLIENT_YY SENDING_YY . AUTHORIZATION_YY STRING_YY INTEGER_YY INTEGER_YY entry_string_list
   58          | CLIENT_YY SENDING_YY . ENVIRONMENT_YY SHELLSCRIPT_YY GLOBUS_SITE_YY STRING_YY admin_optional
  110          | CLIENT_YY SENDING_YY . PROXY_CREDENTIAL_YY
  131          | CLIENT_YY SENDING_YY . KEY_PAIR_YY STRING_YY STRING_YY

    DOWNLOAD_URL_ENCRYPTED_YY         shift, and go to state 29
    DOWNLOAD_COMMAND_ENCRYPTED_YY     shift, and go to state 31
    INSTALLATION_SCRIPT_YY            shift, and go to state 33
    INSTALLATION_SCRIPT_ENCRYPTED_YY  shift, and go to state 34
    AUTHORIZATION_YY                  shift, and go to state 143
    ENVIRONMENT_YY                    shift, and go to state 144
    PROXY_CREDENTIAL_YY               shift, and go to state 145
    KEY_PAIR_YY                       shift, and go to state 146

    installation_script      go to state 147
    download_info_encrypted  go to state 148


state 65

   28 statement: FETCH_YY DOWNLOAD_INFO_YY . FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY

    FOR_YY  shift, and go to state 149


state 66

   30 statement: FETCH_YY PREREQUISITES_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 150


state 67

   27 statement: FETCH_YY INSTALLATION_SCRIPT_YY . FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY

    FOR_YY  shift, and go to state 151


state 68

   29 statement: FETCH_YY AUTHORIZATION_YY . FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY

    FOR_YY  shift, and go to state 152


state 69

   59 statement: FETCH_YY ENVIRONMENT_YY . SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY

    SHELLSCRIPTS_YY  shift, and go to state 153


state 70

  133 statement: FETCH_YY KEY_PAIR_YY .

    $default  reduce using rule 133 (statement)


state 71

   41 statement: VALIDATE_YY DISTINGUISHED_NAME_YY . STRING_YY

    STRING_YY  shift, and go to state 154


state 72

   93 statement: ENABLE_YY ENVIRONMENT_YY . SHELLSCRIPT_YY INTEGER_YY

    SHELLSCRIPT_YY  shift, and go to state 155


state 73

  165 statement: ENABLE_YY GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 156


state 74

   94 statement: DISABLE_YY ENVIRONMENT_YY . SHELLSCRIPT_YY INTEGER_YY

    SHELLSCRIPT_YY  shift, and go to state 157


state 75

  166 statement: DISABLE_YY GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 158


state 76

   65 entry_or_entries: ENTRY_YY .

    $default  reduce using rule 65 (entry_or_entries)


state 77

   87 statement: SHOW_YY ENVIRONMENT_YY . SHELLSCRIPTS_YY show_environment_shellscript_option_list

    SHELLSCRIPTS_YY  shift, and go to state 159


state 78

   66 entry_or_entries: ENTRIES_YY .

    $default  reduce using rule 66 (entry_or_entries)


state 79

   83 statement: SHOW_YY CERTIFICATE_YY . USER_YY html_optional

    USER_YY  shift, and go to state 160


state 80

   84 statement: SHOW_YY CERTIFICATES_YY . ALL_YY html_optional

    ALL_YY  shift, and go to state 161


state 81

  180 statement: SHOW_YY PRIVILEGES_YY . USER_YY html_optional
  181          | SHOW_YY PRIVILEGES_YY . ALL_YY html_optional

    ALL_YY   shift, and go to state 162
    USER_YY  shift, and go to state 163


state 82

  137 globus_site_list: GLOBUS_SITE_YY . ALL_YY
  139 sub_globus_site_list: GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 164
    ALL_YY     shift, and go to state 165


state 83

  136 globus_site_list: GLOBUS_SITES_YY . ALL_YY
  140 sub_globus_site_list: GLOBUS_SITES_YY . STRING_YY

    STRING_YY  shift, and go to state 166
    ALL_YY     shift, and go to state 167


state 84

   67 statement: SHOW_YY entry_or_entries . entry_string_list show_option_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 168


state 85

  158 statement: SHOW_YY globus_site_list . html_optional

    HTML_YY  shift, and go to state 169

    $default  reduce using rule 85 (html_optional)

    html_optional  go to state 170


state 86

  138 globus_site_list: sub_globus_site_list .
  141 sub_globus_site_list: sub_globus_site_list . STRING_YY

    STRING_YY  shift, and go to state 171

    $default  reduce using rule 138 (globus_site_list)


state 87

   97 statement: SET_YY EFFECTIVE_USER_YY . STRING_YY

    STRING_YY  shift, and go to state 172


state 88

  109 statement: PROXY_CREDENTIAL_YY STRING_YY . INVALID_YY CLIENT_YY NOT_YY TO_YY TRANSFER_YY

    INVALID_YY  shift, and go to state 173


state 89

  142 statement: DISTRIBUTE_YY KEY_PAIR_YY . globus_site_list

    GLOBUS_SITE_YY   shift, and go to state 82
    GLOBUS_SITES_YY  shift, and go to state 83

    globus_site_list      go to state 174
    sub_globus_site_list  go to state 86


state 90

  145 statement: SESSION_ID_YY STRING_YY .

    $default  reduce using rule 145 (statement)


state 91

  129 statement: install_or_reinstall PACKAGE_NAME_YY . STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list

    STRING_YY  shift, and go to state 175


state 92

  169 statement: add_or_delete ADMIN_YY . GLOBUS_SITE_YY STRING_YY USER_YY INTEGER_YY

    GLOBUS_SITE_YY  shift, and go to state 176


state 93

   43 prerequisite_string_list: prerequisite_string_list . STRING_YY
   46 statement: ADD_YY PREREQUISITE_YY prerequisite_string_list . FOR_YY ENTRY_YY entry_string_list

    FOR_YY     shift, and go to state 177
    STRING_YY  shift, and go to state 178


state 94

  107 statement: ADD_YY AUTHORIZATION_YY STRING_YY . TO_YY ENTRY_YY entry_string_list

    TO_YY  shift, and go to state 179


state 95

  146 statement: ADD_YY GLOBUS_SITE_YY STRING_YY . globus_site_option_list

    $default  reduce using rule 147 (globus_site_option_list)

    globus_site_option_list  go to state 180


state 96

   98 statement: ADD_YY installation_script STRING_YY . TO_YY ENTRY_YY entry_string_list

    TO_YY  shift, and go to state 181


state 97

  101 statement: ADD_YY download_info STRING_YY . TO_YY ENTRY_YY entry_string_list

    TO_YY  shift, and go to state 182


state 98

   45 entry_string_list: entry_string_list . STRING_YY
   47 statement: DELETE_YY ENTRY_YY entry_string_list . FINALLY_YY

    FINALLY_YY  shift, and go to state 183
    STRING_YY   shift, and go to state 184


state 99

   43 prerequisite_string_list: prerequisite_string_list . STRING_YY
   53 statement: DELETE_YY PREREQUISITE_YY prerequisite_string_list . FOR_YY ENTRY_YY entry_string_list

    FOR_YY     shift, and go to state 185
    STRING_YY  shift, and go to state 178


state 100

   54 statement: DELETE_YY PREREQUISITES_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 186


state 101

   64 statement: DELETE_YY ENVIRONMENT_YY SHELLSCRIPT_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 187


state 102

   62 statement: DELETE_YY ENVIRONMENT_YY SHELLSCRIPTS_YY .
   63          | DELETE_YY ENVIRONMENT_YY SHELLSCRIPTS_YY . FOR_YY GLOBUS_SITE_YY STRING_YY

    FOR_YY  shift, and go to state 188

    $default  reduce using rule 62 (statement)


state 103

   48 statement: DELETE_YY ALL_YY ENTRIES_YY . FOR_YY USER_YY FINALLY_YY

    FOR_YY  shift, and go to state 189


state 104

  159 statement: DELETE_YY GLOBUS_SITE_YY STRING_YY . FINALLY_YY

    FINALLY_YY  shift, and go to state 190


state 105

  144 statement: DELETE_YY PUBLIC_KEY_YY FROM_YY . DATABASE_YY

    DATABASE_YY  shift, and go to state 191


state 106

  143 statement: DELETE_YY KEY_PAIR_YY FROM_YY . DATABASE_YY

    DATABASE_YY  shift, and go to state 192


state 107

   45 entry_string_list: entry_string_list . STRING_YY
   51 statement: UNDELETE_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 51 (statement)


state 108

   52 statement: UNDELETE_YY ALL_YY DELETED_YY . ENTRIES_YY FOR_YY USER_YY

    ENTRIES_YY  shift, and go to state 193


state 109

  161 statement: UNDELETE_YY GLOBUS_SITE_YY STRING_YY . enable_optional

    ENABLE_YY   shift, and go to state 194
    DISABLE_YY  shift, and go to state 195

    ENABLE_YY   [reduce using rule 162 (enable_optional)]
    DISABLE_YY  [reduce using rule 162 (enable_optional)]
    $default    reduce using rule 162 (enable_optional)

    enable_optional  go to state 196


state 110

  170 statement: EDIT_YY GLOBUS_SITE_YY STRING_YY . SET_YY globus_site_option_list
  171          | EDIT_YY GLOBUS_SITE_YY STRING_YY . UNSET_YY globus_site_option_list_1

    SET_YY    shift, and go to state 197
    UNSET_YY  shift, and go to state 198


state 111

    4 statement: START_ENTRY_YY entry_statement_list END_ENTRY_YY .

    $default  reduce using rule 4 (statement)


state 112

   10 keyword_value_pair: PACKAGE_NAME_YY . STRING_YY

    STRING_YY  shift, and go to state 199


state 113

   11 keyword_value_pair: PACKAGE_VERSION_YY . STRING_YY
   12                   | PACKAGE_VERSION_YY . INTEGER_YY

    STRING_YY   shift, and go to state 200
    INTEGER_YY  shift, and go to state 201


state 114

   13 keyword_value_pair: DOWNLOAD_URL_YY . STRING_YY

    STRING_YY  shift, and go to state 202


state 115

   14 keyword_value_pair: DOWNLOAD_URL_ENCRYPTED_YY . STRING_YY

    STRING_YY  shift, and go to state 203


state 116

   15 keyword_value_pair: DOWNLOAD_COMMAND_YY . STRING_YY

    STRING_YY  shift, and go to state 204


state 117

   16 keyword_value_pair: DOWNLOAD_COMMAND_ENCRYPTED_YY . STRING_YY

    STRING_YY  shift, and go to state 205


state 118

   21 prerequisite_statement: PREREQUISITE_YY . STRING_YY
   22                       | PREREQUISITE_YY . STRING_YY STRING_YY

    STRING_YY  shift, and go to state 206


state 119

   17 keyword_value_pair: INSTALLATION_SCRIPT_YY . STRING_YY

    STRING_YY  shift, and go to state 207


state 120

   18 keyword_value_pair: INSTALLATION_SCRIPT_ENCRYPTED_YY . STRING_YY

    STRING_YY  shift, and go to state 208


state 121

   20 keyword_value_pair: AUTHORIZATION_YY . STRING_YY

    STRING_YY  shift, and go to state 209


state 122

    9 entry_statement_list: entry_statement_list PUBLIC_YY .

    $default  reduce using rule 9 (entry_statement_list)


state 123

    8 entry_statement_list: entry_statement_list PRIVATE_YY .

    $default  reduce using rule 8 (entry_statement_list)


state 124

   19 keyword_value_pair: OWNER_YY . STRING_YY

    STRING_YY  shift, and go to state 210


state 125

    6 entry_statement_list: entry_statement_list keyword_value_pair .

    $default  reduce using rule 6 (entry_statement_list)


state 126

    7 entry_statement_list: entry_statement_list prerequisite_statement .

    $default  reduce using rule 7 (entry_statement_list)


state 127

   33 statement: RECEIVE_YY DOWNLOAD_INFO_YY SUCCEEDED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 211


state 128

   34 statement: RECEIVE_YY DOWNLOAD_INFO_YY FAILED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 212


state 129

   35 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY . SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   36          | RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY . FAILED_YY FOR_YY ENTRY_YY entry_string_list

    SUCCEEDED_YY  shift, and go to state 213
    FAILED_YY     shift, and go to state 214


state 130

   37 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY . SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list
   38          | RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY . FAILED_YY FOR_YY ENTRY_YY entry_string_list

    SUCCEEDED_YY  shift, and go to state 215
    FAILED_YY     shift, and go to state 216


state 131

   31 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY SUCCEEDED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 217


state 132

   32 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY FAILED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 218


state 133

   39 statement: RECEIVE_YY AUTHORIZATION_YY SUCCEEDED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 219


state 134

   40 statement: RECEIVE_YY AUTHORIZATION_YY FAILED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 220


state 135

   60 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY . SUCCEEDED_YY FOR_YY GLOBUS_SITE_YY STRING_YY
   61          | RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY . FAILED_YY FOR_YY GLOBUS_SITE_YY STRING_YY

    SUCCEEDED_YY  shift, and go to state 221
    FAILED_YY     shift, and go to state 222


state 136

  134 statement: RECEIVE_YY KEY_PAIR_YY SUCCEEDED_YY .

    $default  reduce using rule 134 (statement)


state 137

  135 statement: RECEIVE_YY KEY_PAIR_YY FAILED_YY .

    $default  reduce using rule 135 (statement)


state 138

   49 statement: MARK_YY AS_YY DELETED_YY . ENTRY_YY entry_string_list
   50          | MARK_YY AS_YY DELETED_YY . ALL_YY ENTRIES_YY FOR_YY USER_YY
  160          | MARK_YY AS_YY DELETED_YY . GLOBUS_SITE_YY STRING_YY

    ENTRY_YY        shift, and go to state 223
    ALL_YY          shift, and go to state 224
    GLOBUS_SITE_YY  shift, and go to state 225


state 139

  108 statement: CLIENT_YY TO_YY TRANSFER_YY . PROXY_CREDENTIAL_YY STRING_YY
  130          | CLIENT_YY TO_YY TRANSFER_YY . KEY_PAIR_YY

    PROXY_CREDENTIAL_YY  shift, and go to state 226
    KEY_PAIR_YY          shift, and go to state 227


state 140

   55 statement: CLIENT_YY TO_YY SEND_YY . ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY STRING_YY admin_optional

    ENVIRONMENT_YY  shift, and go to state 228


state 141

  132 statement: CLIENT_YY ERROR_YY NOT_YY . SENDING_YY KEY_PAIR_YY

    SENDING_YY  shift, and go to state 229


state 142

   95 statement: CLIENT_YY RECEIVE_YY ENTRY_YY . INFO_YY SUCCEEDED_YY
   96          | CLIENT_YY RECEIVE_YY ENTRY_YY . INFO_YY FAILED_YY

    INFO_YY  shift, and go to state 230


state 143

   25 statement: CLIENT_YY SENDING_YY AUTHORIZATION_YY . STRING_YY INTEGER_YY INTEGER_YY entry_string_list

    STRING_YY  shift, and go to state 231


state 144

   58 statement: CLIENT_YY SENDING_YY ENVIRONMENT_YY . SHELLSCRIPT_YY GLOBUS_SITE_YY STRING_YY admin_optional

    SHELLSCRIPT_YY  shift, and go to state 232


state 145

  110 statement: CLIENT_YY SENDING_YY PROXY_CREDENTIAL_YY .

    $default  reduce using rule 110 (statement)


state 146

  131 statement: CLIENT_YY SENDING_YY KEY_PAIR_YY . STRING_YY STRING_YY

    STRING_YY  shift, and go to state 233


state 147

   23 statement: CLIENT_YY SENDING_YY installation_script . STRING_YY INTEGER_YY INTEGER_YY entry_string_list

    STRING_YY  shift, and go to state 234


state 148

   24 statement: CLIENT_YY SENDING_YY download_info_encrypted . STRING_YY INTEGER_YY INTEGER_YY entry_string_list

    STRING_YY  shift, and go to state 235


state 149

   28 statement: FETCH_YY DOWNLOAD_INFO_YY FOR_YY . ENTRY_YY entry_string_list ORDER_YY INTEGER_YY

    ENTRY_YY  shift, and go to state 236


state 150

   30 statement: FETCH_YY PREREQUISITES_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 237


state 151

   27 statement: FETCH_YY INSTALLATION_SCRIPT_YY FOR_YY . ENTRY_YY entry_string_list ORDER_YY INTEGER_YY

    ENTRY_YY  shift, and go to state 238


state 152

   29 statement: FETCH_YY AUTHORIZATION_YY FOR_YY . ENTRY_YY entry_string_list ORDER_YY INTEGER_YY

    ENTRY_YY  shift, and go to state 239


state 153

   59 statement: FETCH_YY ENVIRONMENT_YY SHELLSCRIPTS_YY . FOR_YY GLOBUS_SITE_YY STRING_YY

    FOR_YY  shift, and go to state 240


state 154

   41 statement: VALIDATE_YY DISTINGUISHED_NAME_YY STRING_YY .

    $default  reduce using rule 41 (statement)


state 155

   93 statement: ENABLE_YY ENVIRONMENT_YY SHELLSCRIPT_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 241


state 156

  165 statement: ENABLE_YY GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 165 (statement)


state 157

   94 statement: DISABLE_YY ENVIRONMENT_YY SHELLSCRIPT_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 242


state 158

  166 statement: DISABLE_YY GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 166 (statement)


state 159

   87 statement: SHOW_YY ENVIRONMENT_YY SHELLSCRIPTS_YY . show_environment_shellscript_option_list

    $default  reduce using rule 88 (show_environment_shellscript_option_list)

    show_environment_shellscript_option_list  go to state 243


state 160

   83 statement: SHOW_YY CERTIFICATE_YY USER_YY . html_optional

    HTML_YY  shift, and go to state 169

    $default  reduce using rule 85 (html_optional)

    html_optional  go to state 244


state 161

   84 statement: SHOW_YY CERTIFICATES_YY ALL_YY . html_optional

    HTML_YY  shift, and go to state 169

    $default  reduce using rule 85 (html_optional)

    html_optional  go to state 245


state 162

  181 statement: SHOW_YY PRIVILEGES_YY ALL_YY . html_optional

    HTML_YY  shift, and go to state 169

    $default  reduce using rule 85 (html_optional)

    html_optional  go to state 246


state 163

  180 statement: SHOW_YY PRIVILEGES_YY USER_YY . html_optional

    HTML_YY  shift, and go to state 169

    $default  reduce using rule 85 (html_optional)

    html_optional  go to state 247


state 164

  139 sub_globus_site_list: GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 139 (sub_globus_site_list)


state 165

  137 globus_site_list: GLOBUS_SITE_YY ALL_YY .

    $default  reduce using rule 137 (globus_site_list)


state 166

  140 sub_globus_site_list: GLOBUS_SITES_YY STRING_YY .

    $default  reduce using rule 140 (sub_globus_site_list)


state 167

  136 globus_site_list: GLOBUS_SITES_YY ALL_YY .

    $default  reduce using rule 136 (globus_site_list)


state 168

   45 entry_string_list: entry_string_list . STRING_YY
   67 statement: SHOW_YY entry_or_entries entry_string_list . show_option_list

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 68 (show_option_list)

    show_option_list  go to state 248


state 169

   86 html_optional: HTML_YY .

    $default  reduce using rule 86 (html_optional)


state 170

  158 statement: SHOW_YY globus_site_list html_optional .

    $default  reduce using rule 158 (statement)


state 171

  141 sub_globus_site_list: sub_globus_site_list STRING_YY .

    $default  reduce using rule 141 (sub_globus_site_list)


state 172

   97 statement: SET_YY EFFECTIVE_USER_YY STRING_YY .

    $default  reduce using rule 97 (statement)


state 173

  109 statement: PROXY_CREDENTIAL_YY STRING_YY INVALID_YY . CLIENT_YY NOT_YY TO_YY TRANSFER_YY

    CLIENT_YY  shift, and go to state 249


state 174

  142 statement: DISTRIBUTE_YY KEY_PAIR_YY globus_site_list .

    $default  reduce using rule 142 (statement)


state 175

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY . package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list

    PACKAGE_VERSION_YY  shift, and go to state 250

    $default  reduce using rule 113 (package_version_optional)

    package_version_optional  go to state 251


state 176

  169 statement: add_or_delete ADMIN_YY GLOBUS_SITE_YY . STRING_YY USER_YY INTEGER_YY

    STRING_YY  shift, and go to state 252


state 177

   46 statement: ADD_YY PREREQUISITE_YY prerequisite_string_list FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 253


state 178

   43 prerequisite_string_list: prerequisite_string_list STRING_YY .

    $default  reduce using rule 43 (prerequisite_string_list)


state 179

  107 statement: ADD_YY AUTHORIZATION_YY STRING_YY TO_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 254


state 180

  146 statement: ADD_YY GLOBUS_SITE_YY STRING_YY globus_site_option_list .
  148 globus_site_option_list: globus_site_option_list . globus_site_option

    REPLACE_YY                      shift, and go to state 255
    ENABLED_YY                      shift, and go to state 256
    DISABLED_YY                     shift, and go to state 257
    INTERACTIVE_NODE_YY             shift, and go to state 258
    APPEND_LD_LIBRARY_PATH_YY       shift, and go to state 259
    APPEND_PATH_YY                  shift, and go to state 260
    OPTDBCLI_PATH_YY                shift, and go to state 261
    IP_ADDRESS_YY                   shift, and go to state 262
    INTERACTIVE_NODE_IP_ADDRESS_YY  shift, and go to state 263

    $default  reduce using rule 146 (statement)

    globus_site_option  go to state 264


state 181

   98 statement: ADD_YY installation_script STRING_YY TO_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 265


state 182

  101 statement: ADD_YY download_info STRING_YY TO_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 266


state 183

   47 statement: DELETE_YY ENTRY_YY entry_string_list FINALLY_YY .

    $default  reduce using rule 47 (statement)


state 184

   45 entry_string_list: entry_string_list STRING_YY .

    $default  reduce using rule 45 (entry_string_list)


state 185

   53 statement: DELETE_YY PREREQUISITE_YY prerequisite_string_list FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 267


state 186

   54 statement: DELETE_YY PREREQUISITES_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 268


state 187

   64 statement: DELETE_YY ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY .

    $default  reduce using rule 64 (statement)


state 188

   63 statement: DELETE_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY . GLOBUS_SITE_YY STRING_YY

    GLOBUS_SITE_YY  shift, and go to state 269


state 189

   48 statement: DELETE_YY ALL_YY ENTRIES_YY FOR_YY . USER_YY FINALLY_YY

    USER_YY  shift, and go to state 270


state 190

  159 statement: DELETE_YY GLOBUS_SITE_YY STRING_YY FINALLY_YY .

    $default  reduce using rule 159 (statement)


state 191

  144 statement: DELETE_YY PUBLIC_KEY_YY FROM_YY DATABASE_YY .

    $default  reduce using rule 144 (statement)


state 192

  143 statement: DELETE_YY KEY_PAIR_YY FROM_YY DATABASE_YY .

    $default  reduce using rule 143 (statement)


state 193

   52 statement: UNDELETE_YY ALL_YY DELETED_YY ENTRIES_YY . FOR_YY USER_YY

    FOR_YY  shift, and go to state 271


state 194

  163 enable_optional: ENABLE_YY .

    $default  reduce using rule 163 (enable_optional)


state 195

  164 enable_optional: DISABLE_YY .

    $default  reduce using rule 164 (enable_optional)


state 196

  161 statement: UNDELETE_YY GLOBUS_SITE_YY STRING_YY enable_optional .

    $default  reduce using rule 161 (statement)


state 197

  170 statement: EDIT_YY GLOBUS_SITE_YY STRING_YY SET_YY . globus_site_option_list

    $default  reduce using rule 147 (globus_site_option_list)

    globus_site_option_list  go to state 272


state 198

  171 statement: EDIT_YY GLOBUS_SITE_YY STRING_YY UNSET_YY . globus_site_option_list_1

    $default  reduce using rule 172 (globus_site_option_list_1)

    globus_site_option_list_1  go to state 273


state 199

   10 keyword_value_pair: PACKAGE_NAME_YY STRING_YY .

    $default  reduce using rule 10 (keyword_value_pair)


state 200

   11 keyword_value_pair: PACKAGE_VERSION_YY STRING_YY .

    $default  reduce using rule 11 (keyword_value_pair)


state 201

   12 keyword_value_pair: PACKAGE_VERSION_YY INTEGER_YY .

    $default  reduce using rule 12 (keyword_value_pair)


state 202

   13 keyword_value_pair: DOWNLOAD_URL_YY STRING_YY .

    $default  reduce using rule 13 (keyword_value_pair)


state 203

   14 keyword_value_pair: DOWNLOAD_URL_ENCRYPTED_YY STRING_YY .

    $default  reduce using rule 14 (keyword_value_pair)


state 204

   15 keyword_value_pair: DOWNLOAD_COMMAND_YY STRING_YY .

    $default  reduce using rule 15 (keyword_value_pair)


state 205

   16 keyword_value_pair: DOWNLOAD_COMMAND_ENCRYPTED_YY STRING_YY .

    $default  reduce using rule 16 (keyword_value_pair)


state 206

   21 prerequisite_statement: PREREQUISITE_YY STRING_YY .
   22                       | PREREQUISITE_YY STRING_YY . STRING_YY

    STRING_YY  shift, and go to state 274

    $default  reduce using rule 21 (prerequisite_statement)


state 207

   17 keyword_value_pair: INSTALLATION_SCRIPT_YY STRING_YY .

    $default  reduce using rule 17 (keyword_value_pair)


state 208

   18 keyword_value_pair: INSTALLATION_SCRIPT_ENCRYPTED_YY STRING_YY .

    $default  reduce using rule 18 (keyword_value_pair)


state 209

   20 keyword_value_pair: AUTHORIZATION_YY STRING_YY .

    $default  reduce using rule 20 (keyword_value_pair)


state 210

   19 keyword_value_pair: OWNER_YY STRING_YY .

    $default  reduce using rule 19 (keyword_value_pair)


state 211

   33 statement: RECEIVE_YY DOWNLOAD_INFO_YY SUCCEEDED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 275


state 212

   34 statement: RECEIVE_YY DOWNLOAD_INFO_YY FAILED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 276


state 213

   35 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY SUCCEEDED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 277


state 214

   36 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY FAILED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 278


state 215

   37 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY SUCCEEDED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 279


state 216

   38 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY FAILED_YY . FOR_YY ENTRY_YY entry_string_list

    FOR_YY  shift, and go to state 280


state 217

   31 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY SUCCEEDED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 281


state 218

   32 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY FAILED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 282


state 219

   39 statement: RECEIVE_YY AUTHORIZATION_YY SUCCEEDED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 283


state 220

   40 statement: RECEIVE_YY AUTHORIZATION_YY FAILED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 284


state 221

   60 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY SUCCEEDED_YY . FOR_YY GLOBUS_SITE_YY STRING_YY

    FOR_YY  shift, and go to state 285


state 222

   61 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY FAILED_YY . FOR_YY GLOBUS_SITE_YY STRING_YY

    FOR_YY  shift, and go to state 286


state 223

   49 statement: MARK_YY AS_YY DELETED_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 287


state 224

   50 statement: MARK_YY AS_YY DELETED_YY ALL_YY . ENTRIES_YY FOR_YY USER_YY

    ENTRIES_YY  shift, and go to state 288


state 225

  160 statement: MARK_YY AS_YY DELETED_YY GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 289


state 226

  108 statement: CLIENT_YY TO_YY TRANSFER_YY PROXY_CREDENTIAL_YY . STRING_YY

    STRING_YY  shift, and go to state 290


state 227

  130 statement: CLIENT_YY TO_YY TRANSFER_YY KEY_PAIR_YY .

    $default  reduce using rule 130 (statement)


state 228

   55 statement: CLIENT_YY TO_YY SEND_YY ENVIRONMENT_YY . SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY STRING_YY admin_optional

    SHELLSCRIPT_YY  shift, and go to state 291


state 229

  132 statement: CLIENT_YY ERROR_YY NOT_YY SENDING_YY . KEY_PAIR_YY

    KEY_PAIR_YY  shift, and go to state 292


state 230

   95 statement: CLIENT_YY RECEIVE_YY ENTRY_YY INFO_YY . SUCCEEDED_YY
   96          | CLIENT_YY RECEIVE_YY ENTRY_YY INFO_YY . FAILED_YY

    SUCCEEDED_YY  shift, and go to state 293
    FAILED_YY     shift, and go to state 294


state 231

   25 statement: CLIENT_YY SENDING_YY AUTHORIZATION_YY STRING_YY . INTEGER_YY INTEGER_YY entry_string_list

    INTEGER_YY  shift, and go to state 295


state 232

   58 statement: CLIENT_YY SENDING_YY ENVIRONMENT_YY SHELLSCRIPT_YY . GLOBUS_SITE_YY STRING_YY admin_optional

    GLOBUS_SITE_YY  shift, and go to state 296


state 233

  131 statement: CLIENT_YY SENDING_YY KEY_PAIR_YY STRING_YY . STRING_YY

    STRING_YY  shift, and go to state 297


state 234

   23 statement: CLIENT_YY SENDING_YY installation_script STRING_YY . INTEGER_YY INTEGER_YY entry_string_list

    INTEGER_YY  shift, and go to state 298


state 235

   24 statement: CLIENT_YY SENDING_YY download_info_encrypted STRING_YY . INTEGER_YY INTEGER_YY entry_string_list

    INTEGER_YY  shift, and go to state 299


state 236

   28 statement: FETCH_YY DOWNLOAD_INFO_YY FOR_YY ENTRY_YY . entry_string_list ORDER_YY INTEGER_YY

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 300


state 237

   30 statement: FETCH_YY PREREQUISITES_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 301


state 238

   27 statement: FETCH_YY INSTALLATION_SCRIPT_YY FOR_YY ENTRY_YY . entry_string_list ORDER_YY INTEGER_YY

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 302


state 239

   29 statement: FETCH_YY AUTHORIZATION_YY FOR_YY ENTRY_YY . entry_string_list ORDER_YY INTEGER_YY

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 303


state 240

   59 statement: FETCH_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY . GLOBUS_SITE_YY STRING_YY

    GLOBUS_SITE_YY  shift, and go to state 304


state 241

   93 statement: ENABLE_YY ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY .

    $default  reduce using rule 93 (statement)


state 242

   94 statement: DISABLE_YY ENVIRONMENT_YY SHELLSCRIPT_YY INTEGER_YY .

    $default  reduce using rule 94 (statement)


state 243

   87 statement: SHOW_YY ENVIRONMENT_YY SHELLSCRIPTS_YY show_environment_shellscript_option_list .
   89 show_environment_shellscript_option_list: show_environment_shellscript_option_list . show_environment_shellscript_option

    USER_YY          shift, and go to state 305
    GLOBUS_SITE_YY   shift, and go to state 306
    GLOBUS_SITES_YY  shift, and go to state 307

    $default  reduce using rule 87 (statement)

    show_environment_shellscript_option  go to state 308


state 244

   83 statement: SHOW_YY CERTIFICATE_YY USER_YY html_optional .

    $default  reduce using rule 83 (statement)


state 245

   84 statement: SHOW_YY CERTIFICATES_YY ALL_YY html_optional .

    $default  reduce using rule 84 (statement)


state 246

  181 statement: SHOW_YY PRIVILEGES_YY ALL_YY html_optional .

    $default  reduce using rule 181 (statement)


state 247

  180 statement: SHOW_YY PRIVILEGES_YY USER_YY html_optional .

    $default  reduce using rule 180 (statement)


state 248

   67 statement: SHOW_YY entry_or_entries entry_string_list show_option_list .
   69 show_option_list: show_option_list . show_option

    ALL_YY                       shift, and go to state 309
    USER_YY                      shift, and go to state 310
    PUBLIC_YY                    shift, and go to state 311
    WITH_PREREQUISITES_YY        shift, and go to state 312
    WITH_DEPENDENTS_YY           shift, and go to state 313
    WITH_INSTALLATION_SCRIPT_YY  shift, and go to state 314
    HTML_YY                      shift, and go to state 315
    JAVASCRIPT_YY                shift, and go to state 316
    LEVELS_YY                    shift, and go to state 317

    $default  reduce using rule 67 (statement)

    show_option  go to state 318


state 249

  109 statement: PROXY_CREDENTIAL_YY STRING_YY INVALID_YY CLIENT_YY . NOT_YY TO_YY TRANSFER_YY

    NOT_YY  shift, and go to state 319


state 250

  114 package_version_optional: PACKAGE_VERSION_YY . STRING_YY

    STRING_YY  shift, and go to state 320


state 251

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional . GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list

    GLOBUS_SITE_YY  shift, and go to state 321


state 252

  169 statement: add_or_delete ADMIN_YY GLOBUS_SITE_YY STRING_YY . USER_YY INTEGER_YY

    USER_YY  shift, and go to state 322


state 253

   46 statement: ADD_YY PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 323


state 254

  107 statement: ADD_YY AUTHORIZATION_YY STRING_YY TO_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 324


state 255

  157 globus_site_option: REPLACE_YY .

    $default  reduce using rule 157 (globus_site_option)


state 256

  155 globus_site_option: ENABLED_YY .

    $default  reduce using rule 155 (globus_site_option)


state 257

  156 globus_site_option: DISABLED_YY .

    $default  reduce using rule 156 (globus_site_option)


state 258

  149 globus_site_option: INTERACTIVE_NODE_YY . STRING_YY

    STRING_YY  shift, and go to state 325


state 259

  150 globus_site_option: APPEND_LD_LIBRARY_PATH_YY . STRING_YY

    STRING_YY  shift, and go to state 326


state 260

  151 globus_site_option: APPEND_PATH_YY . STRING_YY

    STRING_YY  shift, and go to state 327


state 261

  152 globus_site_option: OPTDBCLI_PATH_YY . STRING_YY

    STRING_YY  shift, and go to state 328


state 262

  153 globus_site_option: IP_ADDRESS_YY . STRING_YY

    STRING_YY  shift, and go to state 329


state 263

  154 globus_site_option: INTERACTIVE_NODE_IP_ADDRESS_YY . STRING_YY

    STRING_YY  shift, and go to state 330


state 264

  148 globus_site_option_list: globus_site_option_list globus_site_option .

    $default  reduce using rule 148 (globus_site_option_list)


state 265

   98 statement: ADD_YY installation_script STRING_YY TO_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 331


state 266

  101 statement: ADD_YY download_info STRING_YY TO_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 332


state 267

   53 statement: DELETE_YY PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 333


state 268

   45 entry_string_list: entry_string_list . STRING_YY
   54 statement: DELETE_YY PREREQUISITES_YY FOR_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 54 (statement)


state 269

   63 statement: DELETE_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 334


state 270

   48 statement: DELETE_YY ALL_YY ENTRIES_YY FOR_YY USER_YY . FINALLY_YY

    FINALLY_YY  shift, and go to state 335


state 271

   52 statement: UNDELETE_YY ALL_YY DELETED_YY ENTRIES_YY FOR_YY . USER_YY

    USER_YY  shift, and go to state 336


state 272

  148 globus_site_option_list: globus_site_option_list . globus_site_option
  170 statement: EDIT_YY GLOBUS_SITE_YY STRING_YY SET_YY globus_site_option_list .

    REPLACE_YY                      shift, and go to state 255
    ENABLED_YY                      shift, and go to state 256
    DISABLED_YY                     shift, and go to state 257
    INTERACTIVE_NODE_YY             shift, and go to state 258
    APPEND_LD_LIBRARY_PATH_YY       shift, and go to state 259
    APPEND_PATH_YY                  shift, and go to state 260
    OPTDBCLI_PATH_YY                shift, and go to state 261
    IP_ADDRESS_YY                   shift, and go to state 262
    INTERACTIVE_NODE_IP_ADDRESS_YY  shift, and go to state 263

    $default  reduce using rule 170 (statement)

    globus_site_option  go to state 264


state 273

  171 statement: EDIT_YY GLOBUS_SITE_YY STRING_YY UNSET_YY globus_site_option_list_1 .
  173 globus_site_option_list_1: globus_site_option_list_1 . globus_site_option_1

    INTERACTIVE_NODE_YY             shift, and go to state 337
    APPEND_LD_LIBRARY_PATH_YY       shift, and go to state 338
    APPEND_PATH_YY                  shift, and go to state 339
    OPTDBCLI_PATH_YY                shift, and go to state 340
    IP_ADDRESS_YY                   shift, and go to state 341
    INTERACTIVE_NODE_IP_ADDRESS_YY  shift, and go to state 342

    $default  reduce using rule 171 (statement)

    globus_site_option_1  go to state 343


state 274

   22 prerequisite_statement: PREREQUISITE_YY STRING_YY STRING_YY .

    $default  reduce using rule 22 (prerequisite_statement)


state 275

   33 statement: RECEIVE_YY DOWNLOAD_INFO_YY SUCCEEDED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 344


state 276

   34 statement: RECEIVE_YY DOWNLOAD_INFO_YY FAILED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 345


state 277

   35 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 346


state 278

   36 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY FAILED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 347


state 279

   37 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 348


state 280

   38 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY FAILED_YY FOR_YY . ENTRY_YY entry_string_list

    ENTRY_YY  shift, and go to state 349


state 281

   31 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY SUCCEEDED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 350


state 282

   32 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY FAILED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 351


state 283

   39 statement: RECEIVE_YY AUTHORIZATION_YY SUCCEEDED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 352


state 284

   40 statement: RECEIVE_YY AUTHORIZATION_YY FAILED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 353


state 285

   60 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY SUCCEEDED_YY FOR_YY . GLOBUS_SITE_YY STRING_YY

    GLOBUS_SITE_YY  shift, and go to state 354


state 286

   61 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY FAILED_YY FOR_YY . GLOBUS_SITE_YY STRING_YY

    GLOBUS_SITE_YY  shift, and go to state 355


state 287

   45 entry_string_list: entry_string_list . STRING_YY
   49 statement: MARK_YY AS_YY DELETED_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 49 (statement)


state 288

   50 statement: MARK_YY AS_YY DELETED_YY ALL_YY ENTRIES_YY . FOR_YY USER_YY

    FOR_YY  shift, and go to state 356


state 289

  160 statement: MARK_YY AS_YY DELETED_YY GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 160 (statement)


state 290

  108 statement: CLIENT_YY TO_YY TRANSFER_YY PROXY_CREDENTIAL_YY STRING_YY .

    $default  reduce using rule 108 (statement)


state 291

   55 statement: CLIENT_YY TO_YY SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY . STRING_YY GLOBUS_SITE_YY STRING_YY admin_optional

    STRING_YY  shift, and go to state 357


state 292

  132 statement: CLIENT_YY ERROR_YY NOT_YY SENDING_YY KEY_PAIR_YY .

    $default  reduce using rule 132 (statement)


state 293

   95 statement: CLIENT_YY RECEIVE_YY ENTRY_YY INFO_YY SUCCEEDED_YY .

    $default  reduce using rule 95 (statement)


state 294

   96 statement: CLIENT_YY RECEIVE_YY ENTRY_YY INFO_YY FAILED_YY .

    $default  reduce using rule 96 (statement)


state 295

   25 statement: CLIENT_YY SENDING_YY AUTHORIZATION_YY STRING_YY INTEGER_YY . INTEGER_YY entry_string_list

    INTEGER_YY  shift, and go to state 358


state 296

   58 statement: CLIENT_YY SENDING_YY ENVIRONMENT_YY SHELLSCRIPT_YY GLOBUS_SITE_YY . STRING_YY admin_optional

    STRING_YY  shift, and go to state 359


state 297

  131 statement: CLIENT_YY SENDING_YY KEY_PAIR_YY STRING_YY STRING_YY .

    $default  reduce using rule 131 (statement)


state 298

   23 statement: CLIENT_YY SENDING_YY installation_script STRING_YY INTEGER_YY . INTEGER_YY entry_string_list

    INTEGER_YY  shift, and go to state 360


state 299

   24 statement: CLIENT_YY SENDING_YY download_info_encrypted STRING_YY INTEGER_YY . INTEGER_YY entry_string_list

    INTEGER_YY  shift, and go to state 361


state 300

   28 statement: FETCH_YY DOWNLOAD_INFO_YY FOR_YY ENTRY_YY entry_string_list . ORDER_YY INTEGER_YY
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184
    ORDER_YY   shift, and go to state 362


state 301

   30 statement: FETCH_YY PREREQUISITES_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 30 (statement)


state 302

   27 statement: FETCH_YY INSTALLATION_SCRIPT_YY FOR_YY ENTRY_YY entry_string_list . ORDER_YY INTEGER_YY
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184
    ORDER_YY   shift, and go to state 363


state 303

   29 statement: FETCH_YY AUTHORIZATION_YY FOR_YY ENTRY_YY entry_string_list . ORDER_YY INTEGER_YY
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184
    ORDER_YY   shift, and go to state 364


state 304

   59 statement: FETCH_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 365


state 305

   90 show_environment_shellscript_option: USER_YY .

    $default  reduce using rule 90 (show_environment_shellscript_option)


state 306

   91 show_environment_shellscript_option: GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 366


state 307

   92 show_environment_shellscript_option: GLOBUS_SITES_YY . ALL_YY

    ALL_YY  shift, and go to state 367


state 308

   89 show_environment_shellscript_option_list: show_environment_shellscript_option_list show_environment_shellscript_option .

    $default  reduce using rule 89 (show_environment_shellscript_option_list)


state 309

   70 show_option: ALL_YY .

    $default  reduce using rule 70 (show_option)


state 310

   71 show_option: USER_YY .

    $default  reduce using rule 71 (show_option)


state 311

   72 show_option: PUBLIC_YY .

    $default  reduce using rule 72 (show_option)


state 312

   73 show_option: WITH_PREREQUISITES_YY .

    $default  reduce using rule 73 (show_option)


state 313

   74 show_option: WITH_DEPENDENTS_YY .

    $default  reduce using rule 74 (show_option)


state 314

   75 show_option: WITH_INSTALLATION_SCRIPT_YY .

    $default  reduce using rule 75 (show_option)


state 315

   76 show_option: HTML_YY .

    $default  reduce using rule 76 (show_option)


state 316

   77 show_option: JAVASCRIPT_YY .

    $default  reduce using rule 77 (show_option)


state 317

   78 show_option: LEVELS_YY . level_list

    $default  reduce using rule 79 (level_list)

    level_list  go to state 368


state 318

   69 show_option_list: show_option_list show_option .

    $default  reduce using rule 69 (show_option_list)


state 319

  109 statement: PROXY_CREDENTIAL_YY STRING_YY INVALID_YY CLIENT_YY NOT_YY . TO_YY TRANSFER_YY

    TO_YY  shift, and go to state 369


state 320

  114 package_version_optional: PACKAGE_VERSION_YY STRING_YY .

    $default  reduce using rule 114 (package_version_optional)


state 321

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY . STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list

    STRING_YY  shift, and go to state 370


state 322

  169 statement: add_or_delete ADMIN_YY GLOBUS_SITE_YY STRING_YY USER_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 371


state 323

   45 entry_string_list: entry_string_list . STRING_YY
   46 statement: ADD_YY PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 46 (statement)


state 324

   45 entry_string_list: entry_string_list . STRING_YY
  107 statement: ADD_YY AUTHORIZATION_YY STRING_YY TO_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 107 (statement)


state 325

  149 globus_site_option: INTERACTIVE_NODE_YY STRING_YY .

    $default  reduce using rule 149 (globus_site_option)


state 326

  150 globus_site_option: APPEND_LD_LIBRARY_PATH_YY STRING_YY .

    $default  reduce using rule 150 (globus_site_option)


state 327

  151 globus_site_option: APPEND_PATH_YY STRING_YY .

    $default  reduce using rule 151 (globus_site_option)


state 328

  152 globus_site_option: OPTDBCLI_PATH_YY STRING_YY .

    $default  reduce using rule 152 (globus_site_option)


state 329

  153 globus_site_option: IP_ADDRESS_YY STRING_YY .

    $default  reduce using rule 153 (globus_site_option)


state 330

  154 globus_site_option: INTERACTIVE_NODE_IP_ADDRESS_YY STRING_YY .

    $default  reduce using rule 154 (globus_site_option)


state 331

   45 entry_string_list: entry_string_list . STRING_YY
   98 statement: ADD_YY installation_script STRING_YY TO_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 98 (statement)


state 332

   45 entry_string_list: entry_string_list . STRING_YY
  101 statement: ADD_YY download_info STRING_YY TO_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 101 (statement)


state 333

   45 entry_string_list: entry_string_list . STRING_YY
   53 statement: DELETE_YY PREREQUISITE_YY prerequisite_string_list FOR_YY ENTRY_YY entry_string_list .

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 53 (statement)


state 334

   63 statement: DELETE_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 63 (statement)


state 335

   48 statement: DELETE_YY ALL_YY ENTRIES_YY FOR_YY USER_YY FINALLY_YY .

    $default  reduce using rule 48 (statement)


state 336

   52 statement: UNDELETE_YY ALL_YY DELETED_YY ENTRIES_YY FOR_YY USER_YY .

    $default  reduce using rule 52 (statement)


state 337

  174 globus_site_option_1: INTERACTIVE_NODE_YY .

    $default  reduce using rule 174 (globus_site_option_1)


state 338

  175 globus_site_option_1: APPEND_LD_LIBRARY_PATH_YY .

    $default  reduce using rule 175 (globus_site_option_1)


state 339

  176 globus_site_option_1: APPEND_PATH_YY .

    $default  reduce using rule 176 (globus_site_option_1)


state 340

  177 globus_site_option_1: OPTDBCLI_PATH_YY .

    $default  reduce using rule 177 (globus_site_option_1)


state 341

  178 globus_site_option_1: IP_ADDRESS_YY .

    $default  reduce using rule 178 (globus_site_option_1)


state 342

  179 globus_site_option_1: INTERACTIVE_NODE_IP_ADDRESS_YY .

    $default  reduce using rule 179 (globus_site_option_1)


state 343

  173 globus_site_option_list_1: globus_site_option_list_1 globus_site_option_1 .

    $default  reduce using rule 173 (globus_site_option_list_1)


state 344

   33 statement: RECEIVE_YY DOWNLOAD_INFO_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 33 (statement)


state 345

   34 statement: RECEIVE_YY DOWNLOAD_INFO_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 34 (statement)


state 346

   35 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 372


state 347

   36 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 373


state 348

   37 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 374


state 349

   38 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 375


state 350

   31 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 31 (statement)


state 351

   32 statement: RECEIVE_YY INSTALLATION_SCRIPT_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 32 (statement)


state 352

   39 statement: RECEIVE_YY AUTHORIZATION_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 39 (statement)


state 353

   40 statement: RECEIVE_YY AUTHORIZATION_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 40 (statement)


state 354

   60 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY SUCCEEDED_YY FOR_YY GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 376


state 355

   61 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY FAILED_YY FOR_YY GLOBUS_SITE_YY . STRING_YY

    STRING_YY  shift, and go to state 377


state 356

   50 statement: MARK_YY AS_YY DELETED_YY ALL_YY ENTRIES_YY FOR_YY . USER_YY

    USER_YY  shift, and go to state 378


state 357

   55 statement: CLIENT_YY TO_YY SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY . GLOBUS_SITE_YY STRING_YY admin_optional

    GLOBUS_SITE_YY  shift, and go to state 379


state 358

   25 statement: CLIENT_YY SENDING_YY AUTHORIZATION_YY STRING_YY INTEGER_YY INTEGER_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 380


state 359

   58 statement: CLIENT_YY SENDING_YY ENVIRONMENT_YY SHELLSCRIPT_YY GLOBUS_SITE_YY STRING_YY . admin_optional

    ADMIN_YY  shift, and go to state 381

    $default  reduce using rule 56 (admin_optional)

    admin_optional  go to state 382


state 360

   23 statement: CLIENT_YY SENDING_YY installation_script STRING_YY INTEGER_YY INTEGER_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 383


state 361

   24 statement: CLIENT_YY SENDING_YY download_info_encrypted STRING_YY INTEGER_YY INTEGER_YY . entry_string_list

    $default  reduce using rule 44 (entry_string_list)

    entry_string_list  go to state 384


state 362

   28 statement: FETCH_YY DOWNLOAD_INFO_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 385


state 363

   27 statement: FETCH_YY INSTALLATION_SCRIPT_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 386


state 364

   29 statement: FETCH_YY AUTHORIZATION_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 387


state 365

   59 statement: FETCH_YY ENVIRONMENT_YY SHELLSCRIPTS_YY FOR_YY GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 59 (statement)


state 366

   91 show_environment_shellscript_option: GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 91 (show_environment_shellscript_option)


state 367

   92 show_environment_shellscript_option: GLOBUS_SITES_YY ALL_YY .

    $default  reduce using rule 92 (show_environment_shellscript_option)


state 368

   78 show_option: LEVELS_YY level_list .
   80 level_list: level_list . INTEGER_YY INTEGER_YY
   81           | level_list . INTEGER_YY INTEGER_YY SEMI_COLON_YY
   82           | level_list . INTEGER_YY INTEGER_YY SLASH_YY

    INTEGER_YY  shift, and go to state 388

    $default  reduce using rule 78 (show_option)


state 369

  109 statement: PROXY_CREDENTIAL_YY STRING_YY INVALID_YY CLIENT_YY NOT_YY TO_YY . TRANSFER_YY

    TRANSFER_YY  shift, and go to state 389


state 370

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY . stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list

    STDOUT_FILENAME_YY  shift, and go to state 390

    $default  reduce using rule 115 (stdout_filename_optional)

    stdout_filename_optional  go to state 391


state 371

  169 statement: add_or_delete ADMIN_YY GLOBUS_SITE_YY STRING_YY USER_YY INTEGER_YY .

    $default  reduce using rule 169 (statement)


state 372

   35 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 35 (statement)


state 373

   36 statement: RECEIVE_YY DOWNLOAD_URL_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 36 (statement)


state 374

   37 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY SUCCEEDED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 37 (statement)


state 375

   38 statement: RECEIVE_YY DOWNLOAD_COMMAND_YY ENCRYPTED_YY FAILED_YY FOR_YY ENTRY_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 38 (statement)


state 376

   60 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY SUCCEEDED_YY FOR_YY GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 60 (statement)


state 377

   61 statement: RECEIVE_YY ENVIRONMENT_YY SHELLSCRIPT_YY FAILED_YY FOR_YY GLOBUS_SITE_YY STRING_YY .

    $default  reduce using rule 61 (statement)


state 378

   50 statement: MARK_YY AS_YY DELETED_YY ALL_YY ENTRIES_YY FOR_YY USER_YY .

    $default  reduce using rule 50 (statement)


state 379

   55 statement: CLIENT_YY TO_YY SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY . STRING_YY admin_optional

    STRING_YY  shift, and go to state 392


state 380

   25 statement: CLIENT_YY SENDING_YY AUTHORIZATION_YY STRING_YY INTEGER_YY INTEGER_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 25 (statement)


state 381

   57 admin_optional: ADMIN_YY .

    $default  reduce using rule 57 (admin_optional)


state 382

   58 statement: CLIENT_YY SENDING_YY ENVIRONMENT_YY SHELLSCRIPT_YY GLOBUS_SITE_YY STRING_YY admin_optional .

    $default  reduce using rule 58 (statement)


state 383

   23 statement: CLIENT_YY SENDING_YY installation_script STRING_YY INTEGER_YY INTEGER_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 23 (statement)


state 384

   24 statement: CLIENT_YY SENDING_YY download_info_encrypted STRING_YY INTEGER_YY INTEGER_YY entry_string_list .
   45 entry_string_list: entry_string_list . STRING_YY

    STRING_YY  shift, and go to state 184

    $default  reduce using rule 24 (statement)


state 385

   28 statement: FETCH_YY DOWNLOAD_INFO_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY .

    $default  reduce using rule 28 (statement)


state 386

   27 statement: FETCH_YY INSTALLATION_SCRIPT_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY .

    $default  reduce using rule 27 (statement)


state 387

   29 statement: FETCH_YY AUTHORIZATION_YY FOR_YY ENTRY_YY entry_string_list ORDER_YY INTEGER_YY .

    $default  reduce using rule 29 (statement)


state 388

   80 level_list: level_list INTEGER_YY . INTEGER_YY
   81           | level_list INTEGER_YY . INTEGER_YY SEMI_COLON_YY
   82           | level_list INTEGER_YY . INTEGER_YY SLASH_YY

    INTEGER_YY  shift, and go to state 393


state 389

  109 statement: PROXY_CREDENTIAL_YY STRING_YY INVALID_YY CLIENT_YY NOT_YY TO_YY TRANSFER_YY .

    $default  reduce using rule 109 (statement)


state 390

  116 stdout_filename_optional: STDOUT_FILENAME_YY . STRING_YY

    STRING_YY  shift, and go to state 394


state 391

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional . stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list

    STDERR_FILENAME_YY  shift, and go to state 395

    $default  reduce using rule 117 (stderr_filename_optional)

    stderr_filename_optional  go to state 396


state 392

   55 statement: CLIENT_YY TO_YY SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY STRING_YY . admin_optional

    ADMIN_YY  shift, and go to state 381

    $default  reduce using rule 56 (admin_optional)

    admin_optional  go to state 397


state 393

   80 level_list: level_list INTEGER_YY INTEGER_YY .
   81           | level_list INTEGER_YY INTEGER_YY . SEMI_COLON_YY
   82           | level_list INTEGER_YY INTEGER_YY . SLASH_YY

    SEMI_COLON_YY  shift, and go to state 398
    SLASH_YY       shift, and go to state 399

    $default  reduce using rule 80 (level_list)


state 394

  116 stdout_filename_optional: STDOUT_FILENAME_YY STRING_YY .

    $default  reduce using rule 116 (stdout_filename_optional)


state 395

  118 stderr_filename_optional: STDERR_FILENAME_YY . STRING_YY

    STRING_YY  shift, and go to state 400


state 396

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional . timeout_optional reinstall_prerequisites_optional link_expression_list

    TIMEOUT_YY  shift, and go to state 401

    $default  reduce using rule 119 (timeout_optional)

    timeout_optional  go to state 402


state 397

   55 statement: CLIENT_YY TO_YY SEND_YY ENVIRONMENT_YY SHELLSCRIPT_YY STRING_YY GLOBUS_SITE_YY STRING_YY admin_optional .

    $default  reduce using rule 55 (statement)


state 398

   81 level_list: level_list INTEGER_YY INTEGER_YY SEMI_COLON_YY .

    $default  reduce using rule 81 (level_list)


state 399

   82 level_list: level_list INTEGER_YY INTEGER_YY SLASH_YY .

    $default  reduce using rule 82 (level_list)


state 400

  118 stderr_filename_optional: STDERR_FILENAME_YY STRING_YY .

    $default  reduce using rule 118 (stderr_filename_optional)


state 401

  120 timeout_optional: TIMEOUT_YY . INTEGER_YY

    INTEGER_YY  shift, and go to state 403


state 402

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional . reinstall_prerequisites_optional link_expression_list

    NO_YY         shift, and go to state 404
    REINSTALL_YY  shift, and go to state 405

    REINSTALL_YY  [reduce using rule 121 (reinstall_prerequisites_optional)]
    $default      reduce using rule 121 (reinstall_prerequisites_optional)

    reinstall_prerequisites_optional  go to state 406


state 403

  120 timeout_optional: TIMEOUT_YY INTEGER_YY .

    $default  reduce using rule 120 (timeout_optional)


state 404

  123 reinstall_prerequisites_optional: NO_YY . REINSTALL_YY PREREQUISITES_YY

    REINSTALL_YY  shift, and go to state 407


state 405

  122 reinstall_prerequisites_optional: REINSTALL_YY . PREREQUISITES_YY

    PREREQUISITES_YY  shift, and go to state 408


state 406

  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional . link_expression_list

    $default  reduce using rule 124 (link_expression_list)

    link_expression_list  go to state 409


state 407

  123 reinstall_prerequisites_optional: NO_YY REINSTALL_YY . PREREQUISITES_YY

    PREREQUISITES_YY  shift, and go to state 410


state 408

  122 reinstall_prerequisites_optional: REINSTALL_YY PREREQUISITES_YY .

    $default  reduce using rule 122 (reinstall_prerequisites_optional)


state 409

  125 link_expression_list: link_expression_list . link_expression
  129 statement: install_or_reinstall PACKAGE_NAME_YY STRING_YY package_version_optional GLOBUS_SITE_YY STRING_YY stdout_filename_optional stderr_filename_optional timeout_optional reinstall_prerequisites_optional link_expression_list .

    NO_LINKS_YY        shift, and go to state 411
    WITH_LINKS_YY      shift, and go to state 412
    LINK_DIRECTORY_YY  shift, and go to state 413

    $default  reduce using rule 129 (statement)

    link_expression  go to state 414


state 410

  123 reinstall_prerequisites_optional: NO_YY REINSTALL_YY PREREQUISITES_YY .

    $default  reduce using rule 123 (reinstall_prerequisites_optional)


state 411

  126 link_expression: NO_LINKS_YY .

    $default  reduce using rule 126 (link_expression)


state 412

  127 link_expression: WITH_LINKS_YY .

    $default  reduce using rule 127 (link_expression)


state 413

  128 link_expression: LINK_DIRECTORY_YY . STRING_YY

    STRING_YY  shift, and go to state 415


state 414

  125 link_expression_list: link_expression_list link_expression .

    $default  reduce using rule 125 (link_expression_list)


state 415

  128 link_expression: LINK_DIRECTORY_YY STRING_YY .

    $default  reduce using rule 128 (link_expression)


File: installer.info,  Node: Parser Server Functions,  Prev: Parser Server Symbols Rules and States,  Up: Parser Server

15.2 Parser Server Functions
============================

 -- Function: int yyparse (`yyscan_t' parameter)
     Definition generated by GNU Bison.


File: installer.info,  Node: Scanner Client,  Next: Parser Client,  Prev: Parser Server,  Up: Top

16 Scanner Client
*****************

The input file for the client's scanner is `scnrclnt.web'.

* Menu:

* Scanner Client Variables::
* Scanner Client Functions::


File: installer.info,  Node: Scanner Client Variables,  Next: Scanner Client Functions,  Up: Scanner Client

16.1 Scanner Client Variables
=============================

 -- Variable: bool DEBUG_SCANNER


File: installer.info,  Node: Scanner Client Functions,  Prev: Scanner Client Variables,  Up: Scanner Client

16.2 Scanner Client Functions
=============================

 -- Function: int zzlex (YYSTYPE *LVALP, yyscan_t PARAMETER)

 -- Function: int zzwrap (`yyscan_t' parameter)

 -- Function: int zzerror (`void*' v, `char const*' s)


File: installer.info,  Node: Parser Client,  Next: Entry_Type Reference,  Prev: Scanner Client,  Up: Top

17 Parser Client
****************

Unlike the server's parser, the client's parser only processes input
that comes from the peer, not input written by the user or generated by
an external program.  The user controls the behaviour of the client by
means of *note Command Line Arguments and Options::, not by means of an
input file.  (It would be possible to change this in the future, if it
would ever seem desirable.)  There is therefore no need for the input
format of the client's parser to be particularly user-friendly.  For
example, all letters in keywords are uppercase.  This is a safety
measure that makes it less likely that an unquoted string would
conflict with a keyword.

   The server uses threads to process the commands sent to it from the
client, so that the order of its responses to the client doesn't
necessarily (and probably won't) correspond to the order of the
commands.  For this reason, the responses must contain more information
than would otherwise be the case.  For example, in the rule
     `SERVER_ZZ PREREQUISITES_ZZ FOR_ZZ ENTRY_ZZ entry_string_list
     FOUND_ZZ prerequisite_list',

the "non-terminal symbols" `entry_string_list' and `prerequisite' list
contain the names of the packages specified and possibly their version
numbers, so that it's possible to associate this response with the
command that caused it.

   "Terminal symbols" (a.k.a., ""tokens"") in Bison are implemented as
preprocessor macros, defined in the header file created by Bison when
it's invoked using the `-d' or `--defines' option.  This header file
must be included in all C or C++  source files that refer to these
terminal symbols.  Since CPP (the C preprocessor) has no concept of
namespaces, it is therefore necessary to ensure that the names of these
terminal symbols differ from those of any other entities defined in the
source code.  For this reason, all of the terminal symbols defined by
the programmer (as opposed to Bison itself) have the suffix "`_ZZ'".
Similarly, the terminal symbols in the parser for the server have the
suffix "`_YY'" (*note Parser Server::).

* Menu:

* Parser Client Symbols Rules and States::
* Parser Client Functions::

